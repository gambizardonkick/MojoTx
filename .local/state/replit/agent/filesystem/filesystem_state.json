{"file_contents":{"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\nimport { initializeFirebase } from \"./firebase\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize Firebase\n  initializeFirebase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Seed database on startup\n  try {\n    await seedDatabase();\n  } catch (error) {\n    console.error(\"Failed to seed database:\", error);\n  }\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2493},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/copy-button.tsx":{"content":"import { useState } from \"react\";\nimport { Copy, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface CopyButtonProps {\n  text: string;\n  label?: string;\n}\n\nexport function CopyButton({ text, label = \"Copy\" }: CopyButtonProps) {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = async () => {\n    await navigator.clipboard.writeText(text);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <Button\n      onClick={handleCopy}\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"gap-2\"\n      data-testid=\"button-copy\"\n    >\n      {copied ? (\n        <>\n          <Check className=\"w-4 h-4\" />\n          Copied!\n        </>\n      ) : (\n        <>\n          <Copy className=\"w-4 h-4\" />\n          {label}\n        </>\n      )}\n    </Button>\n  );\n}\n","size_bytes":841},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/pages/free-spins.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Gift, CheckCircle2, Clock } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CopyButton } from \"@/components/copy-button\";\nimport { CountdownTimer } from \"@/components/countdown-timer\";\nimport type { FreeSpinsOffer } from \"@shared/schema\";\n\nexport default function FreeSpins() {\n  const { data: offers = [], isLoading } = useQuery<FreeSpinsOffer[]>({\n    queryKey: [\"/api/free-spins\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading offers...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const activeOffers = offers.filter((o) => o.isActive && new Date(o.expiresAt) > new Date());\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-5xl mx-auto px-4 py-8 md:py-12 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-3\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground\">\n            Free Spins\n          </h1>\n          <p className=\"text-muted-foreground\">Claim your exclusive free spins offers</p>\n        </div>\n\n        {/* Offers */}\n        {activeOffers.length > 0 ? (\n          <div className=\"space-y-6\">\n            {activeOffers.map((offer) => {\n              const claimProgress = ((offer.totalClaims - offer.claimsRemaining) / offer.totalClaims) * 100;\n              \n              return (\n                <Card\n                  key={offer.id}\n                  className=\"overflow-hidden\"\n                  data-testid={`card-offer-${offer.id}`}\n                >\n                  <div className=\"p-8 space-y-6\">\n                    {/* Code Section */}\n                    <div className=\"text-center space-y-4\">\n                      <p className=\"text-sm text-muted-foreground uppercase tracking-wider font-semibold\">\n                        Promo Code\n                      </p>\n                      <div className=\"inline-flex items-center gap-4 bg-muted p-4 rounded-lg\">\n                        <code className=\"text-2xl font-mono font-bold text-primary\" data-testid=\"text-promo-code\">\n                          {offer.code}\n                        </code>\n                        <CopyButton text={offer.code} />\n                      </div>\n                    </div>\n\n                    {/* Game Info */}\n                    <div className=\"flex flex-col md:flex-row gap-6 items-center\">\n                      <div className=\"flex-shrink-0\">\n                        <img\n                          src={offer.gameImage}\n                          alt={offer.gameName}\n                          className=\"w-48 h-48 object-cover rounded-lg\"\n                          data-testid={`img-game-${offer.id}`}\n                        />\n                      </div>\n\n                      <div className=\"flex-1 space-y-4 text-center md:text-left\">\n                        <div>\n                          <h2 className=\"text-2xl font-bold\" data-testid={`text-game-name-${offer.id}`}>\n                            {offer.gameName}\n                          </h2>\n                          <p className=\"text-muted-foreground\" data-testid={`text-provider-${offer.id}`}>by {offer.gameProvider}</p>\n                        </div>\n\n                        <div className=\"flex flex-wrap gap-3 justify-center md:justify-start\">\n                          <Badge variant=\"outline\" className=\"text-sm px-3 py-1.5\" data-testid={`badge-spins-${offer.id}`}>\n                            {offer.spinsCount} × ${Number(offer.spinValue)} spins\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-sm px-3 py-1.5\" data-testid={`badge-claims-${offer.id}`}>\n                            {offer.claimsRemaining} / {offer.totalClaims} claims left\n                          </Badge>\n                        </div>\n\n                        {/* Progress Bar */}\n                        <div className=\"space-y-2\">\n                          <Progress value={claimProgress} className=\"h-2\" />\n                          <p className=\"text-xs text-muted-foreground\">\n                            {Math.round(claimProgress)}% claimed\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Countdown */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center gap-2 justify-center text-muted-foreground\">\n                        <Clock className=\"w-4 h-4\" />\n                        <p className=\"text-sm font-semibold uppercase tracking-wider\">\n                          Expires In\n                        </p>\n                      </div>\n                      <CountdownTimer endDate={new Date(offer.expiresAt)} />\n                    </div>\n\n                    {/* Requirements */}\n                    <div className=\"space-y-4\" data-testid={`section-requirements-${offer.id}`}>\n                      <h3 className=\"text-lg font-semibold\">Requirements</h3>\n                      <Card className=\"p-4 bg-muted\">\n                        <ul className=\"space-y-2\">\n                          {offer.requirements.map((req, idx) => (\n                            <li key={idx} className=\"flex items-start gap-2 text-sm\">\n                              <CheckCircle2 className=\"w-4 h-4 text-primary flex-shrink-0 mt-0.5\" />\n                              <span>{req}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </Card>\n                    </div>\n                  </div>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Card className=\"p-12 text-center\">\n            <Gift className=\"w-16 h-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n            <p className=\"text-muted-foreground\">No active free spins offers at the moment</p>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6333},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"replit.md":{"content":"# MojoTX Gambling Streamer Website\n\n## Overview\n\nMojoTX is a gambling streamer rewards platform built for the Kick.com streamer MojoTX. The application provides a comprehensive gamification system featuring monthly leaderboards, tiered level milestones, multiplier-based challenges, free spins offers, and a referral program. Users can track their progress, compete for prizes, and claim exclusive rewards through an admin-managed content system.\n\nThe platform is designed with a dark, high-energy aesthetic inspired by modern gambling platforms (Stake, Gamdom) and streaming services (Kick.com), emphasizing competitive elements, data clarity, and visual excitement through glowing effects and bold typography.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Tooling**\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server, providing fast HMR and optimized production builds\n- **Wouter** for lightweight client-side routing\n- **TanStack Query (React Query)** for server state management, caching, and data synchronization\n\n**UI Component System**\n- **shadcn/ui** component library built on Radix UI primitives, providing accessible, customizable components\n- **Tailwind CSS** for utility-first styling with a custom design system\n- **Class Variance Authority (CVA)** for managing component variants\n- Custom design tokens defined in CSS variables for colors, spacing, and effects (dark mode optimized)\n\n**Design System**\n- Dark theme with gambling/streaming platform aesthetics\n- High-energy visual language with gradient effects, glowing borders, and elevated cards\n- Typography hierarchy using Inter/Poppins for competitive data display\n- Consistent spacing scale (4, 6, 8, 12, 16, 24px units)\n- Responsive grid layouts for leaderboards, milestone cards, and challenges\n\n**State Management Strategy**\n- Server state managed via TanStack Query with optimistic updates\n- Form state handled by React Hook Form with Zod validation\n- UI state (modals, sidebar) managed locally with React hooks\n- No global client state management library (Redux/Zustand) - intentionally kept simple\n\n### Backend Architecture\n\n**Server Framework**\n- **Express.js** on Node.js for RESTful API endpoints\n- TypeScript for type safety across the entire stack\n- Custom middleware for request logging and JSON parsing\n- Development mode uses Vite middleware for SSR and HMR\n\n**API Design**\n- RESTful endpoints organized by feature domain:\n  - `/api/leaderboard/*` - Leaderboard entries and settings\n  - `/api/milestones/*` - Level milestone management\n  - `/api/challenges/*` - Challenge CRUD operations\n  - `/api/free-spins/*` - Free spins offer management\n- Consistent response format with error handling\n- Request validation using Zod schemas shared between client and server\n\n**Data Layer**\n- **Drizzle ORM** for type-safe database queries and schema management\n- Schema-first design with TypeScript inference for full type safety\n- Storage abstraction layer (`storage.ts`) providing a clean interface for data operations\n- Separation of concerns: routes → storage → database\n\n**Database Seeding**\n- Automatic database seeding on startup for initial data (level milestones, sample entries)\n- Idempotent seed logic that checks for existing data before inserting\n- Milestone data pre-populated with 24 tier levels (Bronze through Opal)\n\n### Data Storage\n\n**Database Technology**\n- **Neon Serverless PostgreSQL** as the primary database\n- WebSocket-based connection pooling for serverless environments\n- Environment-based configuration via `DATABASE_URL`\n\n**Schema Design**\n- **leaderboard_entries**: Tracks user rankings, wagered amounts, and prize allocations\n- **leaderboard_settings**: Stores monthly competition configuration (prize pool, end date)\n- **level_milestones**: Defines the 24-tier progression system with rewards\n- **challenges**: Manages multiplier-based game challenges with requirements\n- **free_spins_offers**: Tracks promotional offers with claim limits and expiration\n\n**Data Model Characteristics**\n- UUID primary keys for all entities\n- Decimal type for monetary values (precision 15, scale 2) ensuring accurate financial calculations\n- Timestamp tracking for creation and updates\n- Array fields for storing multiple rewards per milestone\n- Boolean flags for active/inactive state management\n\n### External Dependencies\n\n**Third-Party Services**\n- **Neon Database** - Serverless PostgreSQL hosting with WebSocket support\n- **Image Hosting (ibb.co)** - External CDN for milestone tier badge images\n- **Discord Integration** - External link for claim ticket creation (`discord.gg/mojotx`)\n- **Kick.com** - Referenced streaming platform (`kick.com/mojotx`)\n- **Gamdom** - Gambling platform used for referral program integration\n\n**UI Component Libraries**\n- **Radix UI** - Accessible component primitives (dialogs, popovers, tooltips, etc.)\n- **Lucide React** - Icon library for consistent iconography\n- **date-fns** - Date manipulation and formatting utilities\n- **Embla Carousel** - Touch-friendly carousel component\n\n**Development Tools**\n- **Replit Plugins** - Vite plugins for development banner, error overlay, and cartographer\n- **ESBuild** - Fast JavaScript bundler for production builds\n- **Drizzle Kit** - Database migration and schema management CLI\n\n**Form & Validation**\n- **React Hook Form** - Performant form state management\n- **Zod** - Runtime type validation and schema generation\n- **@hookform/resolvers** - Integration between React Hook Form and Zod\n\n**Styling & Animation**\n- **Tailwind CSS** with PostCSS for processing\n- **Autoprefixer** for cross-browser CSS compatibility\n- **clsx & tailwind-merge** - Conditional class name utilities","size_bytes":5823},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/admin-edit-dialogs.tsx":{"content":"import React from \"react\";\nimport { Pencil, Save, Plus, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport type { LevelMilestone, Challenge, FreeSpinsOffer, InsertLevelMilestone, InsertChallenge, InsertFreeSpinsOffer } from \"@shared/schema\";\n\n// Milestone Edit Dialog\nexport function MilestoneEditDialog({\n  milestone,\n  editData,\n  setEditData,\n  onSave,\n  onClose,\n  isPending,\n}: {\n  milestone: LevelMilestone | null;\n  editData: InsertLevelMilestone & { rewards: string[] };\n  setEditData: (data: InsertLevelMilestone & { rewards: string[] }) => void;\n  onSave: () => void;\n  onClose: () => void;\n  isPending: boolean;\n}) {\n  const [rewardInput, setRewardInput] = React.useState(\"\");\n\n  const addReward = () => {\n    if (rewardInput.trim()) {\n      setEditData({ ...editData, rewards: [...editData.rewards, rewardInput.trim()] });\n      setRewardInput(\"\");\n    }\n  };\n\n  const removeReward = (index: number) => {\n    setEditData({ ...editData, rewards: editData.rewards.filter((_, i) => i !== index) });\n  };\n\n  return (\n    <Dialog open={!!milestone} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Milestone</DialogTitle>\n          <DialogDescription>Update milestone details</DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-ms-name\">Name</Label>\n              <Input\n                id=\"edit-ms-name\"\n                value={editData.name}\n                onChange={(e) => setEditData({ ...editData, name: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-ms-tier\">Tier</Label>\n              <Input\n                id=\"edit-ms-tier\"\n                type=\"number\"\n                value={editData.tier}\n                onChange={(e) => setEditData({ ...editData, tier: parseInt(e.target.value) || 1 })}\n              />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"edit-ms-imageUrl\">Image URL</Label>\n            <Input\n              id=\"edit-ms-imageUrl\"\n              value={editData.imageUrl}\n              onChange={(e) => setEditData({ ...editData, imageUrl: e.target.value })}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label>Rewards</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                value={rewardInput}\n                onChange={(e) => setRewardInput(e.target.value)}\n                placeholder=\"Enter a reward...\"\n                onKeyPress={(e) => e.key === \"Enter\" && addReward()}\n              />\n              <Button onClick={addReward} type=\"button\" size=\"sm\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <div className=\"space-y-1 mt-2\">\n              {editData.rewards.map((reward, idx) => (\n                <div key={idx} className=\"flex items-center justify-between p-2 border border-border rounded text-sm\">\n                  <span>{reward}</span>\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => removeReward(idx)}>\n                    <Trash2 className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n          <Button onClick={onSave} disabled={isPending} className=\"w-full\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save Changes\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Challenge Edit Dialog\nexport function ChallengeEditDialog({\n  challenge,\n  editData,\n  setEditData,\n  onSave,\n  onClose,\n  isPending,\n}: {\n  challenge: Challenge | null;\n  editData: InsertChallenge;\n  setEditData: (data: InsertChallenge) => void;\n  onSave: () => void;\n  onClose: () => void;\n  isPending: boolean;\n}) {\n  return (\n    <Dialog open={!!challenge} onOpenChange={onClose}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Edit Challenge</DialogTitle>\n          <DialogDescription>Update challenge details</DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-ch-gameName\">Game Name</Label>\n              <Input\n                id=\"edit-ch-gameName\"\n                value={editData.gameName}\n                onChange={(e) => setEditData({ ...editData, gameName: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-ch-gameImage\">Game Image URL</Label>\n              <Input\n                id=\"edit-ch-gameImage\"\n                value={editData.gameImage}\n                onChange={(e) => setEditData({ ...editData, gameImage: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-ch-minMultiplier\">Min Multiplier</Label>\n              <Input\n                id=\"edit-ch-minMultiplier\"\n                type=\"number\"\n                step=\"0.01\"\n                value={editData.minMultiplier}\n                onChange={(e) => setEditData({ ...editData, minMultiplier: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-ch-minBet\">Min Bet ($)</Label>\n              <Input\n                id=\"edit-ch-minBet\"\n                type=\"number\"\n                step=\"0.01\"\n                value={editData.minBet}\n                onChange={(e) => setEditData({ ...editData, minBet: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-ch-prize\">Prize ($)</Label>\n              <Input\n                id=\"edit-ch-prize\"\n                type=\"number\"\n                step=\"0.01\"\n                value={editData.prize}\n                onChange={(e) => setEditData({ ...editData, prize: e.target.value })}\n              />\n            </div>\n          </div>\n          <Button onClick={onSave} disabled={isPending} className=\"w-full\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save Changes\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Free Spins Edit Dialog\nexport function FreeSpinsEditDialog({\n  offer,\n  editData,\n  setEditData,\n  onSave,\n  onClose,\n  isPending,\n}: {\n  offer: FreeSpinsOffer | null;\n  editData: InsertFreeSpinsOffer & { requirements: string[] };\n  setEditData: (data: InsertFreeSpinsOffer & { requirements: string[] }) => void;\n  onSave: () => void;\n  onClose: () => void;\n  isPending: boolean;\n}) {\n  const [reqInput, setReqInput] = React.useState(\"\");\n\n  const addRequirement = () => {\n    if (reqInput.trim()) {\n      setEditData({ ...editData, requirements: [...editData.requirements, reqInput.trim()] });\n      setReqInput(\"\");\n    }\n  };\n\n  return (\n    <Dialog open={!!offer} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Free Spins Offer</DialogTitle>\n          <DialogDescription>Update offer details</DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-fs-code\">Code</Label>\n              <Input\n                id=\"edit-fs-code\"\n                value={editData.code}\n                onChange={(e) => setEditData({ ...editData, code: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-fs-gameName\">Game Name</Label>\n              <Input\n                id=\"edit-fs-gameName\"\n                value={editData.gameName}\n                onChange={(e) => setEditData({ ...editData, gameName: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-fs-gameProvider\">Provider</Label>\n              <Input\n                id=\"edit-fs-gameProvider\"\n                value={editData.gameProvider}\n                onChange={(e) => setEditData({ ...editData, gameProvider: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-fs-spinsCount\">Spins Count</Label>\n              <Input\n                id=\"edit-fs-spinsCount\"\n                type=\"number\"\n                value={editData.spinsCount}\n                onChange={(e) => setEditData({ ...editData, spinsCount: parseInt(e.target.value) || 0 })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-fs-spinValue\">Spin Value ($)</Label>\n              <Input\n                id=\"edit-fs-spinValue\"\n                type=\"number\"\n                step=\"0.01\"\n                value={editData.spinValue}\n                onChange={(e) => setEditData({ ...editData, spinValue: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-fs-claimsRemaining\">Claims Remaining</Label>\n              <Input\n                id=\"edit-fs-claimsRemaining\"\n                type=\"number\"\n                value={editData.claimsRemaining}\n                onChange={(e) => setEditData({ ...editData, claimsRemaining: parseInt(e.target.value) || 0 })}\n              />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"edit-fs-gameImage\">Game Image URL</Label>\n            <Input\n              id=\"edit-fs-gameImage\"\n              value={editData.gameImage}\n              onChange={(e) => setEditData({ ...editData, gameImage: e.target.value })}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label>Requirements</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                value={reqInput}\n                onChange={(e) => setReqInput(e.target.value)}\n                placeholder=\"Enter a requirement...\"\n                onKeyPress={(e) => e.key === \"Enter\" && addRequirement()}\n              />\n              <Button onClick={addRequirement} type=\"button\" size=\"sm\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <div className=\"space-y-1 mt-2\">\n              {editData.requirements.map((req, idx) => (\n                <div key={idx} className=\"flex items-center justify-between p-2 border border-border rounded text-sm\">\n                  <span>{req}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() =>\n                      setEditData({\n                        ...editData,\n                        requirements: editData.requirements.filter((_, i) => i !== idx),\n                      })\n                    }\n                  >\n                    <Trash2 className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n          <Button onClick={onSave} disabled={isPending} className=\"w-full\">\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save Changes\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11791},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/app-sidebar.tsx":{"content":"import { Trophy, Award, Target, Gift, Users, ExternalLink, HelpCircle, Store } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { SiDiscord, SiX, SiInstagram, SiKick } from \"react-icons/si\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\n\nconst mainMenuItems = [\n  {\n    title: \"Leaderboard\",\n    url: \"/\",\n    icon: Trophy,\n  },\n  {\n    title: \"Milestones\",\n    url: \"/milestones\",\n    icon: Award,\n  },\n];\n\nconst communityMenuItems = [\n  {\n    title: \"Challenges\",\n    url: \"/challenges\",\n    icon: Target,\n  },\n  {\n    title: \"Free Spins\",\n    url: \"/free-spins\",\n    icon: Gift,\n  },\n];\n\nconst socialLinks = [\n  {\n    name: \"Discord\",\n    url: \"https://discord.gg/mojotx\",\n    icon: SiDiscord,\n    color: \"text-[#5865F2]\",\n  },\n  {\n    name: \"Kick\",\n    url: \"https://kick.com/mojotx\",\n    icon: SiKick,\n    color: \"text-[#53FC18]\",\n  },\n  {\n    name: \"Twitter\",\n    url: \"https://twitter.com/MojoTxOnX\",\n    icon: SiX,\n    color: \"text-foreground\",\n  },\n  {\n    name: \"Instagram\",\n    url: \"https://instagram.com/MojoTxKick\",\n    icon: SiInstagram,\n    color: \"text-[#E4405F]\",\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar className=\"border-r border-border\">\n      <SidebarHeader className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center gap-3\">\n          <img \n            src=\"https://files.kick.com/images/user/565379/profile_image/conversion/6165ea43-dffd-419e-b4ea-b3ebde51a45e-fullsize.webp\" \n            alt=\"MojoTX Logo\" \n            className=\"w-10 h-10 rounded-full ring-2 ring-primary/20\"\n          />\n          <div>\n            <h1 className=\"text-lg font-bold text-foreground\">\n              MojoTX\n            </h1>\n            <p className=\"text-xs text-muted-foreground\">Rewards Hub</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent className=\"px-3 py-4\">\n        {/* MAIN Section */}\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-xs uppercase tracking-wider font-bold text-muted-foreground px-3 py-2\">\n            Main\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {mainMenuItems.map((item) => {\n                const isActive = location === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild \n                      isActive={isActive}\n                    >\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                        <item.icon className=\"w-4 h-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* COMMUNITY Section */}\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-xs uppercase tracking-wider font-bold text-muted-foreground px-3 py-2\">\n            Community\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {communityMenuItems.map((item) => {\n                const isActive = location === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild \n                      isActive={isActive}\n                    >\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                        <item.icon className=\"w-4 h-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* STORE Section */}\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-xs uppercase tracking-wider font-bold text-muted-foreground px-3 py-2\">\n            Gamdom\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton asChild isActive={location === \"/referral\"}>\n                  <Link href=\"/referral\" data-testid=\"link-referral\">\n                    <Users className=\"w-4 h-4\" />\n                    <span>Referral Program</span>\n                  </Link>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n              <SidebarMenuItem>\n                <SidebarMenuButton asChild>\n                  <a href=\"https://gamdom.com/r/mojokick\" target=\"_blank\" rel=\"noopener noreferrer\" data-testid=\"link-gamdom-store\">\n                    <Store className=\"w-4 h-4\" />\n                    <span>Gamdom Sign Up</span>\n                    <ExternalLink className=\"w-3 h-3 ml-auto opacity-60\" />\n                  </a>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* SUPPORT Section */}\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-xs uppercase tracking-wider font-bold text-muted-foreground px-3 py-2\">\n            Support\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton asChild>\n                  <a href=\"https://discord.gg/mojotx\" target=\"_blank\" rel=\"noopener noreferrer\" data-testid=\"link-support-discord\">\n                    <HelpCircle className=\"w-4 h-4\" />\n                    <span>Help & Support</span>\n                    <ExternalLink className=\"w-3 h-3 ml-auto opacity-60\" />\n                  </a>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t border-border p-4\">\n        <div className=\"space-y-4\">\n          <Button \n            asChild \n            className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-semibold\"\n            data-testid=\"button-gamdom\"\n          >\n            <a href=\"https://gamdom.com/r/mojokick\" target=\"_blank\" rel=\"noopener noreferrer\">\n              Play on Gamdom\n              <ExternalLink className=\"w-4 h-4 ml-2\" />\n            </a>\n          </Button>\n          \n          <Separator />\n          \n          <div className=\"space-y-3\">\n            <p className=\"text-xs text-muted-foreground uppercase tracking-wider text-center font-semibold\">\n              Follow MojoTX\n            </p>\n            <div className=\"grid grid-cols-4 gap-2\">\n              {socialLinks.map((social) => (\n                <Button \n                  key={social.name}\n                  asChild \n                  size=\"icon\" \n                  variant=\"ghost\"\n                  className={`hover-elevate ${social.color} transition-colors`}\n                  data-testid={`button-social-${social.name.toLowerCase()}`}\n                >\n                  <a href={social.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <social.icon className=\"w-4 h-4\" />\n                    <span className=\"sr-only\">{social.name}</span>\n                  </a>\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":7915},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"design_guidelines.md":{"content":"# MojoTX Gambling Streamer Website - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Reference-Based (Gambling/Streaming Platform Aesthetic)\n\n**Primary References:**\n- Kick.com streaming platform aesthetics\n- Modern gambling platforms (Stake, Gamdom) for card layouts and data presentation\n- Gaming UI patterns for competitive elements and rank displays\n\n**Design Principles:**\n1. **High Energy & Competition:** Create visual excitement through bold typography, glowing effects, and dynamic card layouts\n2. **Data Clarity:** Leaderboards and stats must be instantly scannable with clear hierarchy\n3. **Dark Premium Feel:** Deep backgrounds with luminous accents create immersive gambling/streaming environment\n4. **Gamification Visual Language:** Rank badges, progress indicators, and reward displays should feel tactile and valuable\n\n## Typography\n\n**Font System:**\n- **Primary:** Inter or Poppins (600-800 weights) for headlines and competitive data\n- **Secondary:** System font stack for body text and descriptions\n- **Mono:** JetBrains Mono for codes and technical displays\n\n**Type Scale:**\n- Hero/Page Titles: text-5xl to text-6xl, font-bold\n- Section Headers: text-3xl to text-4xl, font-semibold\n- Card Titles: text-xl to text-2xl, font-semibold\n- Leaderboard Ranks: text-4xl to text-5xl, font-extrabold (oversized for impact)\n- Prize Amounts: text-2xl to text-3xl, font-bold with tabular numbers\n- Body Text: text-base to text-lg\n- Small Labels: text-sm, uppercase tracking-wider\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 4, 6, 8, 12, 16, 24 (e.g., p-4, gap-6, mt-8, py-12, mb-16, space-y-24)\n\n**Grid Strategy:**\n- Max container width: max-w-7xl\n- Leaderboard: Single column stack with full-width cards\n- Level Milestones: Grid of 3-4 columns (grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4)\n- Challenges: Grid of 2-3 cards per row (grid-cols-1 md:grid-cols-2 lg:grid-cols-3)\n- Consistent section padding: py-16 to py-24 for desktop, py-12 for mobile\n\n**Page Structure:**\nEach page follows: Hero/Title Bar → Primary Content Grid → Secondary Information → CTA Footer\n\n## Component Library\n\n### Navigation\n- Sticky top navigation with blur backdrop effect\n- Logo left, main nav center, Discord/Social icons right\n- Mobile: Hamburger menu with full-screen overlay\n- Active page indicator with underline or glow effect\n\n### Leaderboard Components\n- **Countdown Timer:** Large, prominent display with individual digit cards and labels (Days/Hours/Minutes/Seconds)\n- **Prize Pool Card:** Oversized total with gradient background, positioned above leaderboard\n- **Rank Cards:** Full-width cards with:\n  - Left: Large rank number with medal icons for top 3 (1st, 2nd, 3rd get special treatment)\n  - Center: Username/player name (text-xl font-bold)\n  - Right side: Wagered amount and prize in stacked layout\n  - Hover: Subtle lift and glow effect\n- Top 3 entries get enhanced styling with borders/glows\n\n### Level Milestone Cards\n- **Badge Display:** Centered rank badge image (large, 120px+)\n- **Rank Name:** Below badge (text-2xl font-bold)\n- **Rewards List:** Bullet points or icon list of bonuses\n- **Claim Button:** Full-width primary button at card bottom\n- **Modal Popup:** Discord ticket creation overlay with close button, instructions, and Discord link button\n- Cards arranged in progressive grid showing rank hierarchy\n\n### Challenge Cards\n- **Game Image:** Top of card, aspect-16/9 or square, with subtle overlay\n- **Challenge Details:** \n  - Game name (text-xl font-semibold)\n  - Multiplier requirement with \"x\" prefix (large, bold)\n  - Min bet amount with currency icon\n  - Prize display (prominent, text-2xl)\n- **Status Badge:** Active/Expired indicator in corner\n- **Border Glow:** Subtle animated glow for active challenges\n\n### Free Spins Claim Section\n- **Code Display:** Large copy-able code box with one-click copy button\n- **Game Info Card:**\n  - Game logo/image\n  - Provider name (Hacksaw Gaming)\n  - Spin details (100 x $0.20)\n  - Claims remaining with progress bar\n  - Expiration countdown timer\n- **Requirements Box:** Bordered section with checkmark list\n- **Claim CTA:** Large primary button (disabled when requirements not met or expired)\n\n### Referral Program Display\n- **Hero Stats:** Large earnings potential numbers (up to $2,500)\n- **How It Works:** Numbered step cards (1-2-3) with icons\n- **Payout Tiers Table:**\n  - Wager ranges in rows\n  - Corresponding payouts\n  - Highlight maximum tier\n- **Referral Code Box:** Copy-able code with share buttons\n- **Discord CTA:** Button linking to reward claim channel\n\n### Admin Panel Components\n- **Data Tables:** Clean, editable tables for leaderboard entries\n- **Form Inputs:** Text fields, number inputs, image uploaders for challenges\n- **Live Preview:** Show how changes appear on public site\n- **Toggle Switches:** Enable/disable challenges, free spins offers\n- **Save Buttons:** Prominent save actions with success confirmations\n\n### Shared UI Elements\n- **Buttons:**\n  - Primary: Large, bold with glow effect on hover\n  - Secondary: Outlined variant\n  - Copy buttons: Icon + text with success state animation\n  - Disabled state: Reduced opacity with cursor-not-allowed\n- **Cards:** Consistent border-radius (rounded-xl to rounded-2xl), backdrop blur for glassmorphic effect\n- **Badges:** Pill-shaped status indicators (Active/Expired/Claimed)\n- **Progress Bars:** Track claims remaining, countdown timers\n- **Modals:** Centered overlay with dark backdrop, max-w-md to max-w-lg, close button top-right\n\n## Images\n\n**Hero Image:** No traditional hero image - instead use ambient background graphics/patterns that create depth without dominating\n\n**Required Images:**\n1. **Rank Badges:** 24 badge images (Bronze 1-3, Silver 1-3, Gold 1-3, Emerald 1-3, Sapphire 1-3, Ruby 1-3, Diamond 1-3, Opal 1-3) - prominently displayed on Level Milestones page, sized at 120-160px\n2. **Game Images:** Challenge card thumbnails showing game screenshots/logos - aspect-ratio-16/9, rounded corners\n3. **Free Spins Game Logo:** Featured game branding for Rotten by Hacksaw Gaming\n4. **Background Elements:** Subtle geometric patterns, gradient meshes, or abstract gaming motifs that add depth without distraction\n\n**Image Treatment:**\n- Rank badges: Sharp, glowing treatment with subtle drop shadows\n- Game images: Slight blur overlay for text legibility when needed\n- Background: Low opacity patterns that don't compete with content\n\n## Animations\n\n**Minimal, Purpose-Driven:**\n- Countdown timer: Flip animation on number changes\n- Rank cards: Subtle hover lift (translateY(-4px))\n- Buttons: Glow intensity change on hover\n- Modal: Fade in with scale-up entrance\n- Copy buttons: Brief checkmark success animation\n- **NO** scroll-triggered animations or excessive parallax","size_bytes":6788},"client/src/pages/leaderboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Trophy, Medal, Award, MessageCircle } from \"lucide-react\";\nimport { SiDiscord, SiTelegram } from \"react-icons/si\";\nimport { CountdownTimer } from \"@/components/countdown-timer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport type { LeaderboardEntry, LeaderboardSettings } from \"@shared/schema\";\n\nexport default function Leaderboard() {\n  const { data: settings, isLoading: settingsLoading } = useQuery<LeaderboardSettings>({\n    queryKey: [\"/api/leaderboard/settings\"],\n  });\n\n  const { data: entries = [], isLoading: entriesLoading } = useQuery<LeaderboardEntry[]>({\n    queryKey: [\"/api/leaderboard/entries\"],\n  });\n\n  const isLoading = settingsLoading || entriesLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading leaderboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getRankIcon = (rank: number) => {\n    if (rank === 1) return <Trophy className=\"w-7 h-7 text-yellow-500\" />;\n    if (rank === 2) return <Medal className=\"w-7 h-7 text-gray-400\" />;\n    if (rank === 3) return <Award className=\"w-7 h-7 text-amber-700\" />;\n    return null;\n  };\n\n  const getRankClass = (rank: number) => {\n    if (rank === 1) return \"border-yellow-500/20 bg-yellow-500/5\";\n    if (rank === 2) return \"border-gray-400/20 bg-gray-400/5\";\n    if (rank === 3) return \"border-amber-700/20 bg-amber-700/5\";\n    return \"\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-6xl mx-auto px-4 py-8 md:py-12 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-3\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground\">\n            Monthly Leaderboard\n          </h1>\n          <p className=\"text-muted-foreground\">Compete for the top prizes</p>\n        </div>\n\n        {/* Contact Banner */}\n        <Card className=\"p-6 border\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <MessageCircle className=\"w-5 h-5 text-primary\" />\n            <h3 className=\"text-lg font-semibold\">Want to Join the Leaderboard?</h3>\n          </div>\n          <p className=\"text-center text-muted-foreground mb-6 text-sm\">\n            Send me a private message with your <span className=\"font-semibold text-foreground\">Username</span> and <span className=\"font-semibold text-foreground\">Gamdom ID</span>\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-3 justify-center items-center\">\n            <Button\n              asChild\n              className=\"bg-[#5865F2] hover:bg-[#5865F2]/90 text-white min-w-[180px]\"\n              data-testid=\"button-contact-discord\"\n            >\n              <a href=\"https://discord.com/users/mojotxkick\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <SiDiscord className=\"w-4 h-4 mr-2\" />\n                Discord: mojotxkick\n              </a>\n            </Button>\n            <Button\n              asChild\n              className=\"bg-[#26A5E4] hover:bg-[#26A5E4]/90 text-white min-w-[180px]\"\n              data-testid=\"button-contact-telegram\"\n            >\n              <a href=\"https://t.me/mojotx\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <SiTelegram className=\"w-4 h-4 mr-2\" />\n                Telegram: mojotx\n              </a>\n            </Button>\n          </div>\n        </Card>\n\n        {/* Countdown Timer */}\n        {settings && (\n          <div className=\"space-y-4\" data-testid=\"section-countdown\">\n            <h2 className=\"text-xl font-semibold text-center\">Time Remaining</h2>\n            <CountdownTimer endDate={new Date(settings.endDate)} />\n          </div>\n        )}\n\n        {/* Prize Pool */}\n        {settings && (\n          <Card className=\"p-8 border text-center\">\n            <p className=\"text-sm uppercase tracking-wider text-muted-foreground font-semibold mb-2\">\n              Total Prize Pool\n            </p>\n            <p className=\"text-5xl md:text-6xl font-bold text-foreground\" data-testid=\"text-prize-pool\">\n              ${Number(settings.totalPrizePool).toLocaleString()}\n            </p>\n          </Card>\n        )}\n\n        {/* Leaderboard Entries */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-bold\">Rankings</h2>\n          {entries && entries.length > 0 ? (\n            <div className=\"space-y-3\">\n              {entries.map((entry) => (\n                <Card\n                  key={entry.id}\n                  className={`p-5 hover-elevate transition-all ${getRankClass(entry.rank)}`}\n                  data-testid={`card-leaderboard-${entry.rank}`}\n                >\n                  <div className=\"flex items-center gap-4 md:gap-6\">\n                    {/* Rank */}\n                    <div className=\"flex items-center justify-center min-w-[50px]\">\n                      {getRankIcon(entry.rank) || (\n                        <span className=\"text-3xl font-bold text-muted-foreground\">\n                          #{entry.rank}\n                        </span>\n                      )}\n                    </div>\n\n                    {/* Username */}\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"text-lg font-semibold truncate\" data-testid={`text-username-${entry.rank}`}>\n                        {entry.username}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Wagered: ${Number(entry.wagered).toLocaleString()}\n                      </p>\n                    </div>\n\n                    {/* Prize */}\n                    <div className=\"text-right\">\n                      <Badge variant=\"outline\" className=\"text-base font-semibold px-3 py-1.5\">\n                        <span className=\"text-primary\" data-testid={`text-prize-${entry.rank}`}>\n                          ${Number(entry.prize).toLocaleString()}\n                        </span>\n                      </Badge>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"p-12 text-center\">\n              <Trophy className=\"w-16 h-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n              <p className=\"text-muted-foreground\">No leaderboard entries yet</p>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6713},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/milestones.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Award, ExternalLink } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport type { LevelMilestone } from \"@shared/schema\";\n\nexport default function Milestones() {\n  const [selectedMilestone, setSelectedMilestone] = useState<LevelMilestone | null>(null);\n\n  const { data: milestones, isLoading } = useQuery<LevelMilestone[]>({\n    queryKey: [\"/api/milestones\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading milestones...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const sortedMilestones = milestones?.sort((a, b) => a.tier - b.tier) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-6xl mx-auto px-4 py-8 md:py-12 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-3\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground\">\n            Level Milestones\n          </h1>\n          <p className=\"text-muted-foreground\">Unlock exclusive rewards as you level up on Gamdom</p>\n        </div>\n\n        {/* Info Card */}\n        <Card className=\"p-6 border bg-card\">\n          <div className=\"flex items-start gap-4\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n              <Award className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">How to Claim</h3>\n              <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                Reach a milestone level on Gamdom and claim your rewards by creating a ticket on our Discord server\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        {/* Milestone Grid */}\n        {sortedMilestones.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {sortedMilestones.map((milestone) => (\n              <Card\n                key={milestone.id}\n                className=\"p-6 hover-elevate transition-all\"\n                data-testid={`card-milestone-${milestone.tier}`}\n              >\n                <div className=\"space-y-4\">\n                  {/* Badge Image */}\n                  <div className=\"flex justify-center\">\n                    <img\n                      src={milestone.imageUrl}\n                      alt={milestone.name}\n                      className=\"w-32 h-32 object-contain\"\n                      data-testid={`img-badge-${milestone.tier}`}\n                    />\n                  </div>\n\n                  {/* Milestone Name */}\n                  <h3 className=\"text-xl font-bold text-center\" data-testid={`text-milestone-name-${milestone.tier}`}>\n                    {milestone.name}\n                  </h3>\n\n                  {/* Rewards Preview */}\n                  <div className=\"space-y-2\">\n                    <p className=\"text-xs text-muted-foreground font-semibold uppercase tracking-wider\">\n                      Rewards:\n                    </p>\n                    <ul className=\"space-y-1 text-sm\">\n                      {milestone.rewards.slice(0, 2).map((reward, idx) => (\n                        <li key={idx} className=\"flex items-start gap-2\">\n                          <span className=\"text-primary mt-0.5\">•</span>\n                          <span className=\"text-card-foreground\">{reward}</span>\n                        </li>\n                      ))}\n                      {milestone.rewards.length > 2 && (\n                        <li className=\"text-muted-foreground text-xs\">\n                          +{milestone.rewards.length - 2} more...\n                        </li>\n                      )}\n                    </ul>\n                  </div>\n\n                  {/* Claim Button */}\n                  <Button\n                    className=\"w-full\"\n                    onClick={() => setSelectedMilestone(milestone)}\n                    data-testid={`button-claim-${milestone.tier}`}\n                  >\n                    View Details\n                  </Button>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-12 text-center\">\n            <Award className=\"w-16 h-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n            <p className=\"text-muted-foreground\">No milestones available yet</p>\n          </Card>\n        )}\n      </div>\n\n      {/* Claim Modal */}\n      <Dialog open={!!selectedMilestone} onOpenChange={() => setSelectedMilestone(null)}>\n        <DialogContent className=\"max-w-md\" data-testid=\"dialog-claim-milestone\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold\">\n              {selectedMilestone?.name}\n            </DialogTitle>\n            <DialogDescription>\n              Create a ticket on Discord to claim your rewards\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedMilestone && (\n            <div className=\"space-y-6\">\n              {/* Badge Image */}\n              <div className=\"flex justify-center\">\n                <img\n                  src={selectedMilestone.imageUrl}\n                  alt={selectedMilestone.name}\n                  className=\"w-40 h-40 object-contain\"\n                />\n              </div>\n\n              {/* Full Rewards List */}\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-sm uppercase tracking-wider text-muted-foreground\">\n                  All Rewards\n                </h4>\n                <ul className=\"space-y-2\">\n                  {selectedMilestone.rewards.map((reward, idx) => (\n                    <li key={idx} className=\"flex items-start gap-2 text-sm\">\n                      <span className=\"text-primary mt-0.5\">•</span>\n                      <span>{reward}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              {/* Discord Button */}\n              <Button\n                asChild\n                className=\"w-full bg-[#5865F2] hover:bg-[#5865F2]/90 text-white\"\n                data-testid=\"button-claim-discord\"\n              >\n                <a href=\"https://discord.gg/mojotx\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Claim on Discord\n                </a>\n              </Button>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":6961},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/storage.ts":{"content":"import {\n  type LeaderboardEntry,\n  type InsertLeaderboardEntry,\n  type LeaderboardSettings,\n  type InsertLeaderboardSettings,\n  type LevelMilestone,\n  type InsertLevelMilestone,\n  type Challenge,\n  type InsertChallenge,\n  type FreeSpinsOffer,\n  type InsertFreeSpinsOffer,\n} from \"@shared/schema\";\nimport { getDb } from \"./firebase\";\n\nexport interface IStorage {\n  getLeaderboardEntries(): Promise<LeaderboardEntry[]>;\n  getLeaderboardEntry(id: string): Promise<LeaderboardEntry | undefined>;\n  createLeaderboardEntry(entry: InsertLeaderboardEntry): Promise<LeaderboardEntry>;\n  updateLeaderboardEntry(id: string, data: Partial<InsertLeaderboardEntry>): Promise<LeaderboardEntry>;\n  deleteLeaderboardEntry(id: string): Promise<void>;\n\n  getLeaderboardSettings(): Promise<LeaderboardSettings | undefined>;\n  upsertLeaderboardSettings(settings: InsertLeaderboardSettings): Promise<LeaderboardSettings>;\n\n  getLevelMilestones(): Promise<LevelMilestone[]>;\n  getLevelMilestone(id: string): Promise<LevelMilestone | undefined>;\n  createLevelMilestone(milestone: InsertLevelMilestone): Promise<LevelMilestone>;\n  updateLevelMilestone(id: string, data: Partial<InsertLevelMilestone>): Promise<LevelMilestone>;\n  deleteLevelMilestone(id: string): Promise<void>;\n\n  getChallenges(): Promise<Challenge[]>;\n  getChallenge(id: string): Promise<Challenge | undefined>;\n  createChallenge(challenge: InsertChallenge): Promise<Challenge>;\n  updateChallenge(id: string, data: Partial<InsertChallenge>): Promise<Challenge>;\n  deleteChallenge(id: string): Promise<void>;\n  claimChallenge(id: string, username: string, discordUsername: string): Promise<Challenge>;\n\n  getFreeSpinsOffers(): Promise<FreeSpinsOffer[]>;\n  getFreeSpinsOffer(id: string): Promise<FreeSpinsOffer | undefined>;\n  createFreeSpinsOffer(offer: InsertFreeSpinsOffer): Promise<FreeSpinsOffer>;\n  updateFreeSpinsOffer(id: string, data: Partial<InsertFreeSpinsOffer>): Promise<FreeSpinsOffer>;\n  deleteFreeSpinsOffer(id: string): Promise<void>;\n}\n\nexport class FirebaseStorage implements IStorage {\n  private db = getDb();\n\n  async getLeaderboardEntries(): Promise<LeaderboardEntry[]> {\n    const snapshot = await this.db.ref('leaderboardEntries').get();\n    if (!snapshot.exists()) return [];\n    \n    const entries: LeaderboardEntry[] = [];\n    snapshot.forEach((child) => {\n      entries.push({ id: child.key!, ...child.val() } as LeaderboardEntry);\n    });\n    \n    return entries.sort((a, b) => (a.rank || 0) - (b.rank || 0));\n  }\n\n  async getLeaderboardEntry(id: string): Promise<LeaderboardEntry | undefined> {\n    const snapshot = await this.db.ref(`leaderboardEntries/${id}`).get();\n    if (!snapshot.exists()) return undefined;\n    return { id: snapshot.key!, ...snapshot.val() } as LeaderboardEntry;\n  }\n\n  async createLeaderboardEntry(entry: InsertLeaderboardEntry): Promise<LeaderboardEntry> {\n    const newRef = this.db.ref('leaderboardEntries').push();\n    await newRef.set({\n      ...entry,\n      createdAt: new Date().toISOString(),\n    });\n    const snapshot = await newRef.get();\n    return { id: snapshot.key!, ...snapshot.val() } as LeaderboardEntry;\n  }\n\n  async updateLeaderboardEntry(id: string, data: Partial<InsertLeaderboardEntry>): Promise<LeaderboardEntry> {\n    await this.db.ref(`leaderboardEntries/${id}`).update(data);\n    const snapshot = await this.db.ref(`leaderboardEntries/${id}`).get();\n    return { id: snapshot.key!, ...snapshot.val() } as LeaderboardEntry;\n  }\n\n  async deleteLeaderboardEntry(id: string): Promise<void> {\n    await this.db.ref(`leaderboardEntries/${id}`).remove();\n  }\n\n  async getLeaderboardSettings(): Promise<LeaderboardSettings | undefined> {\n    const snapshot = await this.db.ref('leaderboardSettings').get();\n    if (!snapshot.exists()) return undefined;\n    \n    let settings: LeaderboardSettings | undefined;\n    snapshot.forEach((child) => {\n      settings = { id: child.key!, ...child.val() } as LeaderboardSettings;\n      return true;\n    });\n    \n    return settings;\n  }\n\n  async upsertLeaderboardSettings(settings: InsertLeaderboardSettings): Promise<LeaderboardSettings> {\n    const existing = await this.getLeaderboardSettings();\n    \n    if (existing) {\n      await this.db.ref(`leaderboardSettings/${existing.id}`).update({\n        ...settings,\n        updatedAt: new Date().toISOString(),\n      });\n      const snapshot = await this.db.ref(`leaderboardSettings/${existing.id}`).get();\n      return { id: snapshot.key!, ...snapshot.val() } as LeaderboardSettings;\n    } else {\n      const newRef = this.db.ref('leaderboardSettings').push();\n      await newRef.set({\n        ...settings,\n        createdAt: new Date().toISOString(),\n      });\n      const snapshot = await newRef.get();\n      return { id: snapshot.key!, ...snapshot.val() } as LeaderboardSettings;\n    }\n  }\n\n  async getLevelMilestones(): Promise<LevelMilestone[]> {\n    const snapshot = await this.db.ref('levelMilestones').get();\n    if (!snapshot.exists()) return [];\n    \n    const milestones: LevelMilestone[] = [];\n    snapshot.forEach((child) => {\n      milestones.push({ id: child.key!, ...child.val() } as LevelMilestone);\n    });\n    \n    return milestones.sort((a, b) => (a.tier || 0) - (b.tier || 0));\n  }\n\n  async getLevelMilestone(id: string): Promise<LevelMilestone | undefined> {\n    const snapshot = await this.db.ref(`levelMilestones/${id}`).get();\n    if (!snapshot.exists()) return undefined;\n    return { id: snapshot.key!, ...snapshot.val() } as LevelMilestone;\n  }\n\n  async createLevelMilestone(milestone: InsertLevelMilestone): Promise<LevelMilestone> {\n    const newRef = this.db.ref('levelMilestones').push();\n    await newRef.set({\n      ...milestone,\n      createdAt: new Date().toISOString(),\n    });\n    const snapshot = await newRef.get();\n    return { id: snapshot.key!, ...snapshot.val() } as LevelMilestone;\n  }\n\n  async updateLevelMilestone(id: string, data: Partial<InsertLevelMilestone>): Promise<LevelMilestone> {\n    await this.db.ref(`levelMilestones/${id}`).update(data);\n    const snapshot = await this.db.ref(`levelMilestones/${id}`).get();\n    return { id: snapshot.key!, ...snapshot.val() } as LevelMilestone;\n  }\n\n  async deleteLevelMilestone(id: string): Promise<void> {\n    await this.db.ref(`levelMilestones/${id}`).remove();\n  }\n\n  async getChallenges(): Promise<Challenge[]> {\n    const snapshot = await this.db.ref('challenges').get();\n    if (!snapshot.exists()) return [];\n    \n    const challenges: Challenge[] = [];\n    snapshot.forEach((child) => {\n      challenges.push({ id: child.key!, ...child.val() } as Challenge);\n    });\n    \n    return challenges.sort((a, b) => {\n      const dateA = new Date(a.createdAt || 0).getTime();\n      const dateB = new Date(b.createdAt || 0).getTime();\n      return dateB - dateA;\n    });\n  }\n\n  async getChallenge(id: string): Promise<Challenge | undefined> {\n    const snapshot = await this.db.ref(`challenges/${id}`).get();\n    if (!snapshot.exists()) return undefined;\n    return { id: snapshot.key!, ...snapshot.val() } as Challenge;\n  }\n\n  async createChallenge(challenge: InsertChallenge): Promise<Challenge> {\n    const newRef = this.db.ref('challenges').push();\n    await newRef.set({\n      ...challenge,\n      createdAt: new Date().toISOString(),\n    });\n    const snapshot = await newRef.get();\n    return { id: snapshot.key!, ...snapshot.val() } as Challenge;\n  }\n\n  async updateChallenge(id: string, data: Partial<InsertChallenge>): Promise<Challenge> {\n    await this.db.ref(`challenges/${id}`).update(data);\n    const snapshot = await this.db.ref(`challenges/${id}`).get();\n    return { id: snapshot.key!, ...snapshot.val() } as Challenge;\n  }\n\n  async deleteChallenge(id: string): Promise<void> {\n    await this.db.ref(`challenges/${id}`).remove();\n  }\n\n  async claimChallenge(id: string, username: string, discordUsername: string): Promise<Challenge> {\n    await this.db.ref(`challenges/${id}`).update({\n      claimedBy: username,\n      claimStatus: 'claimed',\n      discordUsername: discordUsername,\n    });\n    const snapshot = await this.db.ref(`challenges/${id}`).get();\n    return { id: snapshot.key!, ...snapshot.val() } as Challenge;\n  }\n\n  async getFreeSpinsOffers(): Promise<FreeSpinsOffer[]> {\n    const snapshot = await this.db.ref('freeSpinsOffers').get();\n    if (!snapshot.exists()) return [];\n    \n    const offers: FreeSpinsOffer[] = [];\n    snapshot.forEach((child) => {\n      offers.push({ id: child.key!, ...child.val() } as FreeSpinsOffer);\n    });\n    \n    return offers.sort((a, b) => {\n      const dateA = new Date(a.createdAt || 0).getTime();\n      const dateB = new Date(b.createdAt || 0).getTime();\n      return dateB - dateA;\n    });\n  }\n\n  async getFreeSpinsOffer(id: string): Promise<FreeSpinsOffer | undefined> {\n    const snapshot = await this.db.ref(`freeSpinsOffers/${id}`).get();\n    if (!snapshot.exists()) return undefined;\n    return { id: snapshot.key!, ...snapshot.val() } as FreeSpinsOffer;\n  }\n\n  async createFreeSpinsOffer(offer: InsertFreeSpinsOffer): Promise<FreeSpinsOffer> {\n    const newRef = this.db.ref('freeSpinsOffers').push();\n    await newRef.set({\n      ...offer,\n      createdAt: new Date().toISOString(),\n    });\n    const snapshot = await newRef.get();\n    return { id: snapshot.key!, ...snapshot.val() } as FreeSpinsOffer;\n  }\n\n  async updateFreeSpinsOffer(id: string, data: Partial<InsertFreeSpinsOffer>): Promise<FreeSpinsOffer> {\n    await this.db.ref(`freeSpinsOffers/${id}`).update(data);\n    const snapshot = await this.db.ref(`freeSpinsOffers/${id}`).get();\n    return { id: snapshot.key!, ...snapshot.val() } as FreeSpinsOffer;\n  }\n\n  async deleteFreeSpinsOffer(id: string): Promise<void> {\n    await this.db.ref(`freeSpinsOffers/${id}`).remove();\n  }\n}\n\nexport const storage = new FirebaseStorage();\n","size_bytes":9769},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/db.ts":{"content":"// Referenced from javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":532},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Leaderboard entries\nexport const leaderboardEntries = pgTable(\"leaderboard_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rank: integer(\"rank\").notNull(),\n  username: text(\"username\").notNull(),\n  wagered: decimal(\"wagered\", { precision: 15, scale: 2 }).notNull(),\n  prize: decimal(\"prize\", { precision: 15, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertLeaderboardEntrySchema = createInsertSchema(leaderboardEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertLeaderboardEntry = z.infer<typeof insertLeaderboardEntrySchema>;\nexport type LeaderboardEntry = typeof leaderboardEntries.$inferSelect;\n\n// Leaderboard settings\nexport const leaderboardSettings = pgTable(\"leaderboard_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  totalPrizePool: decimal(\"total_prize_pool\", { precision: 15, scale: 2 }).notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertLeaderboardSettingsSchema = createInsertSchema(leaderboardSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertLeaderboardSettings = z.infer<typeof insertLeaderboardSettingsSchema>;\nexport type LeaderboardSettings = typeof leaderboardSettings.$inferSelect;\n\n// Level milestones\nexport const levelMilestones = pgTable(\"level_milestones\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // e.g., \"Bronze 1\", \"Silver 2\"\n  tier: integer(\"tier\").notNull(), // 1-24 for ordering\n  imageUrl: text(\"image_url\").notNull(),\n  rewards: text(\"rewards\").array().notNull(), // Array of reward descriptions\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertLevelMilestoneSchema = createInsertSchema(levelMilestones).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertLevelMilestone = z.infer<typeof insertLevelMilestoneSchema>;\nexport type LevelMilestone = typeof levelMilestones.$inferSelect;\n\n// Challenges\nexport const challenges = pgTable(\"challenges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameName: text(\"game_name\").notNull(),\n  gameImage: text(\"game_image\").notNull(),\n  minMultiplier: decimal(\"min_multiplier\", { precision: 10, scale: 2 }).notNull(),\n  minBet: decimal(\"min_bet\", { precision: 10, scale: 2 }).notNull(),\n  prize: decimal(\"prize\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  claimedBy: text(\"claimed_by\"),\n  claimStatus: text(\"claim_status\").default(\"unclaimed\"),\n  discordUsername: text(\"discord_username\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertChallengeSchema = createInsertSchema(challenges).omit({\n  id: true,\n  createdAt: true,\n  claimedBy: true,\n  claimStatus: true,\n  discordUsername: true,\n});\n\nexport type InsertChallenge = z.infer<typeof insertChallengeSchema>;\nexport type Challenge = typeof challenges.$inferSelect;\n\n// Free spins offers\nexport const freeSpinsOffers = pgTable(\"free_spins_offers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull(),\n  gameName: text(\"game_name\").notNull(),\n  gameProvider: text(\"game_provider\").notNull(),\n  gameImage: text(\"game_image\").notNull(),\n  spinsCount: integer(\"spins_count\").notNull(),\n  spinValue: decimal(\"spin_value\", { precision: 5, scale: 2 }).notNull(),\n  totalClaims: integer(\"total_claims\").notNull(),\n  claimsRemaining: integer(\"claims_remaining\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  requirements: text(\"requirements\").array().notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertFreeSpinsOfferSchema = createInsertSchema(freeSpinsOffers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertFreeSpinsOffer = z.infer<typeof insertFreeSpinsOfferSchema>;\nexport type FreeSpinsOffer = typeof freeSpinsOffers.$inferSelect;\n","size_bytes":4326},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 15% 15%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 15%;\n\n  --card-border: 220 13% 91%;\n\n  --sidebar: 220 20% 98%;\n\n  --sidebar-foreground: 220 15% 20%;\n\n  --sidebar-border: 220 13% 91%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 15% 95%;\n\n  --sidebar-accent-foreground: 220 15% 20%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 15% 15%;\n\n  --popover-border: 220 13% 91%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 13% 91%;\n\n  --secondary-foreground: 220 15% 20%;\n\n  --muted: 220 13% 95%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 217 91% 60%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 91%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 220 70% 50%;\n  --chart-3: 199 89% 48%;\n  --chart-4: 43 96% 56%;\n  --chart-5: 142 76% 36%;\n\n  --font-sans: Inter, Poppins, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.1);\n  --shadow-sm: 0px 2px 4px -1px rgba(0, 0, 0, 0.06), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.1), 0px 2px 4px -2px rgba(0, 0, 0, 0.1);\n  --shadow-md: 0px 6px 12px -2px rgba(0, 0, 0, 0.12), 0px 3px 6px -3px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0px 10px 20px -4px rgba(0, 0, 0, 0.15), 0px 4px 8px -4px rgba(0, 0, 0, 0.1);\n  --shadow-xl: 0px 20px 40px -8px rgba(0, 0, 0, 0.2), 0px 8px 16px -8px rgba(0, 0, 0, 0.1);\n  --shadow-2xl: 0px 30px 60px -12px rgba(0, 0, 0, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 25% 10%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 20% 20%;\n\n  --card: 220 22% 12%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 220 20% 18%;\n\n  --sidebar: 220 25% 9%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 20% 16%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 22% 15%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 22% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 20% 20%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 20% 20%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 220 20% 18%;\n\n  --muted-foreground: 220 9% 60%;\n\n  --accent: 217 91% 60%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 20% 25%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 70%;\n  --chart-2: 220 70% 60%;\n  --chart-3: 199 89% 58%;\n  --chart-4: 43 96% 66%;\n  --chart-5: 142 76% 46%;\n\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.3);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.4);\n  --shadow-sm: 0px 2px 4px -1px rgba(0, 0, 0, 0.3), 0px 1px 2px -1px rgba(0, 0, 0, 0.4);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.4), 0px 2px 4px -2px rgba(0, 0, 0, 0.3);\n  --shadow-md: 0px 6px 12px -2px rgba(0, 0, 0, 0.5), 0px 3px 6px -3px rgba(0, 0, 0, 0.4);\n  --shadow-lg: 0px 10px 20px -4px rgba(0, 0, 0, 0.6), 0px 4px 8px -4px rgba(0, 0, 0, 0.5);\n  --shadow-xl: 0px 20px 40px -8px rgba(0, 0, 0, 0.7), 0px 8px 16px -8px rgba(0, 0, 0, 0.6);\n  --shadow-2xl: 0px 30px 60px -12px rgba(0, 0, 0, 0.8);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Animated gradient background */\n  .animated-bg {\n    background: linear-gradient(-45deg, hsl(var(--background)), hsl(var(--card)), hsl(var(--background)), hsl(var(--muted)));\n    background-size: 400% 400%;\n    animation: gradient-shift 15s ease infinite;\n  }\n\n  @keyframes gradient-shift {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n\n  /* Gradient text animation */\n  .animate-gradient {\n    background-size: 200% 200%;\n    animation: gradient-flow 3s ease infinite;\n  }\n\n  .animate-gradient-slow {\n    background-size: 200% 200%;\n    animation: gradient-flow 8s ease infinite;\n  }\n\n  @keyframes gradient-flow {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n\n  /* Glow effects */\n  .glow-primary {\n    filter: drop-shadow(0 0 8px hsl(var(--primary) / 0.5));\n  }\n\n  .glow-gold {\n    filter: drop-shadow(0 0 12px rgba(234, 179, 8, 0.6));\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  .glow-silver {\n    filter: drop-shadow(0 0 10px rgba(156, 163, 175, 0.5));\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  .glow-bronze {\n    filter: drop-shadow(0 0 10px rgba(180, 83, 9, 0.5));\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  .glow-text {\n    text-shadow: 0 0 20px hsl(var(--primary) / 0.5), 0 0 40px hsl(var(--accent) / 0.3);\n  }\n\n  .glow-text-subtle {\n    text-shadow: 0 0 10px hsl(var(--primary) / 0.2);\n  }\n\n  .glow-card-primary {\n    box-shadow: 0 0 20px hsl(var(--primary) / 0.15), 0 0 40px hsl(var(--primary) / 0.1);\n  }\n\n  .glow-card-gold {\n    box-shadow: 0 0 20px rgba(234, 179, 8, 0.2), 0 0 40px rgba(234, 179, 8, 0.1);\n  }\n\n  .glow-card-silver {\n    box-shadow: 0 0 15px rgba(156, 163, 175, 0.15), 0 0 30px rgba(156, 163, 175, 0.08);\n  }\n\n  .glow-card-bronze {\n    box-shadow: 0 0 15px rgba(180, 83, 9, 0.2), 0 0 30px rgba(180, 83, 9, 0.1);\n  }\n\n  .glow-badge {\n    box-shadow: 0 0 10px hsl(var(--primary) / 0.3);\n  }\n\n  .glow-discord {\n    box-shadow: 0 0 20px rgba(88, 101, 242, 0.4);\n  }\n\n  .glow-telegram {\n    box-shadow: 0 0 20px rgba(38, 165, 228, 0.4);\n  }\n\n  @keyframes pulse-glow {\n    0%, 100% { \n      filter: drop-shadow(0 0 8px currentColor);\n      opacity: 1;\n    }\n    50% { \n      filter: drop-shadow(0 0 20px currentColor);\n      opacity: 0.8;\n    }\n  }\n\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  /* Float animation */\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  /* Pulse slow */\n  .animate-pulse-slow {\n    animation: pulse-slow 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  @keyframes pulse-slow {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.85; }\n  }\n\n  /* Bounce slow */\n  .animate-bounce-slow {\n    animation: bounce-slow 3s infinite;\n  }\n\n  @keyframes bounce-slow {\n    0%, 100% {\n      transform: translateY(-5%);\n      animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n    }\n    50% {\n      transform: translateY(0);\n      animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n    }\n  }\n\n  /* Slide in animation */\n  .animate-slide-in {\n    animation: slide-in 0.5s ease-out;\n  }\n\n  @keyframes slide-in {\n    0% {\n      opacity: 0;\n      transform: translateX(-30px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  /* Grid background pattern */\n  .bg-grid {\n    background-image: \n      linear-gradient(hsl(var(--primary) / 0.05) 1px, transparent 1px),\n      linear-gradient(90deg, hsl(var(--primary) / 0.05) 1px, transparent 1px);\n    background-size: 50px 50px;\n    animation: grid-flow 20s linear infinite;\n  }\n\n  @keyframes grid-flow {\n    0% { background-position: 0 0; }\n    100% { background-position: 50px 50px; }\n  }\n\n  /* Shimmer effect */\n  .shimmer {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .shimmer::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    animation: shimmer 3s infinite;\n  }\n\n  @keyframes shimmer {\n    0% { left: -100%; }\n    100% { left: 100%; }\n  }\n\n  /* Rotate animation */\n  .animate-rotate {\n    animation: rotate 20s linear infinite;\n  }\n\n  @keyframes rotate {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  /* Scale pulse */\n  .animate-scale-pulse {\n    animation: scale-pulse 2s ease-in-out infinite;\n  }\n\n  @keyframes scale-pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n  }\n}","size_bytes":15573},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport Milestones from \"@/pages/milestones\";\nimport Challenges from \"@/pages/challenges\";\nimport FreeSpins from \"@/pages/free-spins\";\nimport Referral from \"@/pages/referral\";\nimport Admin from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\nimport { Menu } from \"lucide-react\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Leaderboard} />\n      <Route path=\"/milestones\" component={Milestones} />\n      <Route path=\"/challenges\" component={Challenges} />\n      <Route path=\"/free-spins\" component={FreeSpins} />\n      <Route path=\"/referral\" component={Referral} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar />\n            <div className=\"flex flex-col flex-1 overflow-hidden\">\n              <header className=\"flex items-center justify-between px-6 py-4 border-b border-border bg-card sticky top-0 z-50\">\n                <div className=\"flex items-center gap-4\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" className=\"hover-elevate\">\n                    <Menu className=\"w-5 h-5\" />\n                  </SidebarTrigger>\n                  <div className=\"hidden sm:flex items-center gap-3\">\n                    <img \n                      src=\"https://files.kick.com/images/user/565379/profile_image/conversion/6165ea43-dffd-419e-b4ea-b3ebde51a45e-fullsize.webp\" \n                      alt=\"MojoTX\" \n                      className=\"w-8 h-8 rounded-full\"\n                    />\n                    <h1 className=\"text-lg font-bold text-foreground\">\n                      MojoTX Rewards\n                    </h1>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <a \n                    href=\"https://gamdom.com/r/mojokick\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"px-4 py-2 text-sm font-semibold bg-primary text-primary-foreground rounded-lg hover-elevate active-elevate-2 transition-all\"\n                  >\n                    Play on Gamdom\n                  </a>\n                </div>\n              </header>\n              <main className=\"flex-1 overflow-y-auto\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3222},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/referral.tsx":{"content":"import { ExternalLink, DollarSign, Users, Gift } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CopyButton } from \"@/components/copy-button\";\n\nexport default function Referral() {\n  const referralCode = \"mojokick\";\n\n  const payoutTiers = [\n    { wager: \"< $10,000\", payout: \"$25\" },\n    { wager: \"$10,000 - $50,000\", payout: \"$100\" },\n    { wager: \"$50,000 - $100,000\", payout: \"$250\" },\n    { wager: \"$100,000 - $250,000\", payout: \"$500\" },\n    { wager: \"$250,000 - $500,000\", payout: \"$1,000\" },\n    { wager: \"$500,000 - $1,000,000\", payout: \"$1,500\" },\n    { wager: \"> $1,000,000\", payout: \"$2,500\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-5xl mx-auto px-4 py-8 md:py-12 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-3\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground\">\n            Referral Program\n          </h1>\n          <p className=\"text-muted-foreground\">Earn up to $2,500 per referral!</p>\n        </div>\n\n        {/* Hero Card */}\n        <Card className=\"p-8 md:p-10 border text-center\">\n          <div className=\"space-y-4\">\n            <Gift className=\"w-12 h-12 text-primary mx-auto\" />\n            <h2 className=\"text-2xl md:text-3xl font-bold\">\n              Gamdom Referral Program\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Invite players who play big and earn up to <span className=\"text-primary font-bold\">$2,500</span> per player!\n            </p>\n          </div>\n        </Card>\n\n        {/* How It Works */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold text-center\">How It Works</h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"p-6 text-center space-y-4 hover-elevate\">\n              <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                <span className=\"text-2xl font-bold text-primary\">1</span>\n              </div>\n              <h3 className=\"text-lg font-semibold\">Share Your Code</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Share code <span className=\"font-mono font-bold text-primary\">{referralCode}</span> with friends\n              </p>\n            </Card>\n\n            <Card className=\"p-6 text-center space-y-4 hover-elevate\">\n              <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                <span className=\"text-2xl font-bold text-primary\">2</span>\n              </div>\n              <h3 className=\"text-lg font-semibold\">They Play</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                After they wager for a full month, you get paid\n              </p>\n            </Card>\n\n            <Card className=\"p-6 text-center space-y-4 hover-elevate\">\n              <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                <span className=\"text-2xl font-bold text-primary\">3</span>\n              </div>\n              <h3 className=\"text-lg font-semibold\">Earn Rewards</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                The more they play, the higher your payout\n              </p>\n            </Card>\n          </div>\n        </div>\n\n        {/* Referral Code */}\n        <Card className=\"p-8\" data-testid=\"card-referral-code\">\n          <div className=\"text-center space-y-4\">\n            <h3 className=\"text-xl font-bold\">Your Referral Code</h3>\n            <div className=\"inline-flex items-center gap-4 bg-muted p-4 rounded-lg\">\n              <code className=\"text-2xl font-mono font-bold text-primary\" data-testid=\"text-referral-code\">\n                {referralCode}\n              </code>\n              <CopyButton text={referralCode} />\n            </div>\n          </div>\n        </Card>\n\n        {/* Payout Tiers */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold text-center\">Payout Tiers</h2>\n          <Card className=\"overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-border bg-muted\">\n                    <th className=\"text-left p-4 font-semibold\">Monthly Wager</th>\n                    <th className=\"text-right p-4 font-semibold\">Your Payout</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {payoutTiers.map((tier, idx) => (\n                    <tr\n                      key={idx}\n                      className=\"border-b border-border last:border-0 hover-elevate transition-all\"\n                      data-testid={`row-tier-${idx}`}\n                    >\n                      <td className=\"p-4\">{tier.wager}</td>\n                      <td className=\"p-4 text-right\">\n                        <span className={`font-bold ${idx === payoutTiers.length - 1 ? 'text-primary text-lg' : ''}`}>\n                          {tier.payout}\n                        </span>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </div>\n\n        {/* Bonus Info */}\n        <Card className=\"p-6 bg-primary/5 border-primary/20\">\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-3\">\n              <DollarSign className=\"w-6 h-6 text-primary\" />\n              <h3 className=\"text-xl font-bold\">Bonus Cash!</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              For every first deposit your friends make (minimum $25), you'll get <span className=\"text-primary font-bold\">$2.50</span>!\n            </p>\n          </div>\n        </Card>\n\n        {/* CTA */}\n        <div className=\"text-center space-y-4\">\n          <h3 className=\"text-xl font-bold\">Ready to Start Earning?</h3>\n          <p className=\"text-muted-foreground text-sm\">\n            Claim your rewards on Discord\n          </p>\n          <Button size=\"lg\" className=\"gap-2\" asChild data-testid=\"button-discord\">\n            <a\n              href=\"https://discord.gg/mojotx\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <ExternalLink className=\"w-4 h-4\" />\n              Join Discord\n            </a>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6611},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/seed.ts":{"content":"import { storage } from \"./storage\";\n\nconst milestoneData = [\n  { name: \"Bronze 1\", tier: 1, imageUrl: \"https://i.ibb.co/WrGGFCs/image.png\" },\n  { name: \"Bronze 2\", tier: 2, imageUrl: \"https://i.ibb.co/7Jvm8n5z/image.png\" },\n  { name: \"Bronze 3\", tier: 3, imageUrl: \"https://i.ibb.co/DP42gVsL/image.png\" },\n  { name: \"Silver 1\", tier: 4, imageUrl: \"https://i.ibb.co/Fq5M3ntC/image.png\" },\n  { name: \"Silver 2\", tier: 5, imageUrl: \"https://i.ibb.co/v4k46MxT/image.png\" },\n  { name: \"Silver 3\", tier: 6, imageUrl: \"https://i.ibb.co/xtn9Lnrf/image.png\" },\n  { name: \"Gold 1\", tier: 7, imageUrl: \"https://i.ibb.co/Cp7XGNBV/image.png\" },\n  { name: \"Gold 2\", tier: 8, imageUrl: \"https://i.ibb.co/xPZ1Lbb/image.png\" },\n  { name: \"Gold 3\", tier: 9, imageUrl: \"https://i.ibb.co/qL4Yd8bJ/image.png\" },\n  { name: \"Emerald 1\", tier: 10, imageUrl: \"https://i.ibb.co/nMVnvr90/image.png\" },\n  { name: \"Emerald 2\", tier: 11, imageUrl: \"https://i.ibb.co/pjm8MMpN/image.png\" },\n  { name: \"Emerald 3\", tier: 12, imageUrl: \"https://i.ibb.co/7t7KzMgB/image.png\" },\n  { name: \"Sapphire 1\", tier: 13, imageUrl: \"https://i.ibb.co/MyWLsVz0/image.png\" },\n  { name: \"Sapphire 2\", tier: 14, imageUrl: \"https://i.ibb.co/G4kkMMSV/image.png\" },\n  { name: \"Sapphire 3\", tier: 15, imageUrl: \"https://i.ibb.co/NnpFXLdJ/image.png\" },\n  { name: \"Ruby 1\", tier: 16, imageUrl: \"https://i.ibb.co/pBCG4Kkh/image.png\" },\n  { name: \"Ruby 2\", tier: 17, imageUrl: \"https://i.ibb.co/Q3hNWJk1/image.png\" },\n  { name: \"Ruby 3\", tier: 18, imageUrl: \"https://i.ibb.co/dwbkdM13/image.png\" },\n  { name: \"Diamond 1\", tier: 19, imageUrl: \"https://i.ibb.co/K1nKf0n/image.png\" },\n  { name: \"Diamond 2\", tier: 20, imageUrl: \"https://i.ibb.co/WvQZdcL1/image.png\" },\n  { name: \"Diamond 3\", tier: 21, imageUrl: \"https://i.ibb.co/DfDr5b59/image.png\" },\n  { name: \"Opal 1\", tier: 22, imageUrl: \"https://i.ibb.co/zV4bDX5V/image.png\" },\n  { name: \"Opal 2\", tier: 23, imageUrl: \"https://i.ibb.co/BK3LJ3Pd/image.png\" },\n  { name: \"Opal 3\", tier: 24, imageUrl: \"https://i.ibb.co/rfGMN0jZ/image.png\" },\n];\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"Checking seed data...\");\n\n    // Check if already seeded by checking multiple tables\n    const [existingMilestones, existingEntries, existingSettings] = await Promise.all([\n      storage.getLevelMilestones(),\n      storage.getLeaderboardEntries(),\n      storage.getLeaderboardSettings(),\n    ]);\n\n    if (existingMilestones.length > 0 || existingEntries.length > 0 || existingSettings) {\n      console.log(\"Database already contains data, skipping seed...\");\n      return;\n    }\n\n    console.log(\"Seeding database...\");\n\n    // Seed leaderboard settings\n    await storage.upsertLeaderboardSettings({\n      totalPrizePool: \"10000.00\",\n      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n    });\n\n    // Seed sample leaderboard entries\n    const sampleEntries = [\n      { rank: 1, username: \"ProGambler420\", wagered: \"125000.00\", prize: \"3000.00\" },\n      { rank: 2, username: \"LuckyStreamer\", wagered: \"98500.50\", prize: \"2000.00\" },\n      { rank: 3, username: \"HighRoller88\", wagered: \"87300.25\", prize: \"1500.00\" },\n      { rank: 4, username: \"CasinoKing\", wagered: \"76200.00\", prize: \"1000.00\" },\n      { rank: 5, username: \"BetMaster\", wagered: \"65800.75\", prize: \"750.00\" },\n      { rank: 6, username: \"SlotsFan\", wagered: \"54300.50\", prize: \"500.00\" },\n      { rank: 7, username: \"WagerWarrior\", wagered: \"45600.00\", prize: \"400.00\" },\n      { rank: 8, username: \"SpinDoctor\", wagered: \"38900.25\", prize: \"300.00\" },\n      { rank: 9, username: \"JackpotJoe\", wagered: \"32100.00\", prize: \"250.00\" },\n      { rank: 10, username: \"DiceDealer\", wagered: \"28500.50\", prize: \"200.00\" },\n    ];\n\n    for (const entry of sampleEntries) {\n      await storage.createLeaderboardEntry(entry);\n    }\n\n    // Seed all 24 level milestones\n    for (const milestone of milestoneData) {\n      await storage.createLevelMilestone({\n        ...milestone,\n        rewards: [\n          `$${milestone.tier * 50} bonus cash`,\n          `${milestone.tier * 10} free spins`,\n          `${milestone.tier}% rakeback boost`,\n          \"Exclusive Discord role\",\n        ],\n      });\n    }\n\n    // Seed sample challenges\n    await storage.createChallenge({\n      gameName: \"Sweet Bonanza\",\n      gameImage: \"https://images.unsplash.com/photo-1606925797300-0b35e9d1794e?w=800&h=450&fit=crop\",\n      minMultiplier: \"100.00\",\n      minBet: \"1.00\",\n      prize: \"500.00\",\n      isActive: true,\n    });\n\n    await storage.createChallenge({\n      gameName: \"Gates of Olympus\",\n      gameImage: \"https://images.unsplash.com/photo-1511512578047-dfb367046420?w=800&h=450&fit=crop\",\n      minMultiplier: \"50.00\",\n      minBet: \"2.00\",\n      prize: \"250.00\",\n      isActive: true,\n    });\n\n    await storage.createChallenge({\n      gameName: \"Wanted Dead or a Wild\",\n      gameImage: \"https://images.unsplash.com/photo-1579546929518-9e396f3cc809?w=800&h=450&fit=crop\",\n      minMultiplier: \"200.00\",\n      minBet: \"0.50\",\n      prize: \"1000.00\",\n      isActive: true,\n    });\n\n    // Seed free spins offer\n    await storage.createFreeSpinsOffer({\n      code: \"MOJOROTTEN10\",\n      gameName: \"Rotten\",\n      gameProvider: \"Hacksaw Gaming\",\n      gameImage: \"https://images.unsplash.com/photo-1606925797300-0b35e9d1794e?w=800&h=450&fit=crop\",\n      spinsCount: 100,\n      spinValue: \"0.20\",\n      totalClaims: 10,\n      claimsRemaining: 10,\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n      requirements: [\n        \"Deposit $25, or have $25 deposited in last 48 hours\",\n        \"Valid for both new and existing users\",\n        \"Must be claimed within 30 days\",\n        \"Wagering requirement: 40x\",\n      ],\n      isActive: true,\n    });\n\n    console.log(\"Database seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    throw error;\n  }\n}\n","size_bytes":5912},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport {\n  insertLeaderboardEntrySchema,\n  insertLeaderboardSettingsSchema,\n  insertLevelMilestoneSchema,\n  insertChallengeSchema,\n  insertFreeSpinsOfferSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Leaderboard Entries\n  app.get(\"/api/leaderboard/entries\", async (_req, res) => {\n    try {\n      const entries = await storage.getLeaderboardEntries();\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch leaderboard entries\" });\n    }\n  });\n\n  app.post(\"/api/leaderboard/entries\", async (req, res) => {\n    try {\n      const data = insertLeaderboardEntrySchema.parse(req.body);\n      const entry = await storage.createLeaderboardEntry(data);\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid leaderboard entry data\" });\n    }\n  });\n\n  app.patch(\"/api/leaderboard/entries/:id\", async (req, res) => {\n    try {\n      const entry = await storage.updateLeaderboardEntry(req.params.id, req.body);\n      res.json(entry);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update leaderboard entry\" });\n    }\n  });\n\n  app.delete(\"/api/leaderboard/entries/:id\", async (req, res) => {\n    try {\n      await storage.deleteLeaderboardEntry(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete leaderboard entry\" });\n    }\n  });\n\n  // Leaderboard Settings\n  app.get(\"/api/leaderboard/settings\", async (_req, res) => {\n    try {\n      const settings = await storage.getLeaderboardSettings();\n      res.json(settings || null);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch leaderboard settings\" });\n    }\n  });\n\n  app.post(\"/api/leaderboard/settings\", async (req, res) => {\n    try {\n      const data = insertLeaderboardSettingsSchema.parse(req.body);\n      const settings = await storage.upsertLeaderboardSettings(data);\n      res.json(settings);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid leaderboard settings data\" });\n    }\n  });\n\n  // Level Milestones\n  app.get(\"/api/milestones\", async (_req, res) => {\n    try {\n      const milestones = await storage.getLevelMilestones();\n      res.json(milestones);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch milestones\" });\n    }\n  });\n\n  app.post(\"/api/milestones\", async (req, res) => {\n    try {\n      const data = insertLevelMilestoneSchema.parse(req.body);\n      const milestone = await storage.createLevelMilestone(data);\n      res.json(milestone);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid milestone data\" });\n    }\n  });\n\n  app.patch(\"/api/milestones/:id\", async (req, res) => {\n    try {\n      const milestone = await storage.updateLevelMilestone(req.params.id, req.body);\n      res.json(milestone);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update milestone\" });\n    }\n  });\n\n  app.delete(\"/api/milestones/:id\", async (req, res) => {\n    try {\n      await storage.deleteLevelMilestone(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete milestone\" });\n    }\n  });\n\n  // Challenges\n  app.get(\"/api/challenges\", async (_req, res) => {\n    try {\n      const challenges = await storage.getChallenges();\n      res.json(challenges);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch challenges\" });\n    }\n  });\n\n  app.post(\"/api/challenges\", async (req, res) => {\n    try {\n      const data = insertChallengeSchema.parse(req.body);\n      const challenge = await storage.createChallenge(data);\n      res.json(challenge);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid challenge data\" });\n    }\n  });\n\n  app.patch(\"/api/challenges/:id\", async (req, res) => {\n    try {\n      const challenge = await storage.updateChallenge(req.params.id, req.body);\n      res.json(challenge);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update challenge\" });\n    }\n  });\n\n  app.delete(\"/api/challenges/:id\", async (req, res) => {\n    try {\n      await storage.deleteChallenge(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete challenge\" });\n    }\n  });\n\n  app.post(\"/api/challenges/:id/claim\", async (req, res) => {\n    try {\n      const claimSchema = z.object({\n        username: z.string().min(1, \"Username is required\"),\n        discordUsername: z.string().min(1, \"Discord username is required\"),\n      });\n      \n      const validation = claimSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ error: validation.error.errors[0].message });\n      }\n      \n      const { username, discordUsername } = validation.data;\n      const challenge = await storage.claimChallenge(req.params.id, username, discordUsername);\n      res.json(challenge);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to claim challenge\" });\n    }\n  });\n\n  // Free Spins Offers\n  app.get(\"/api/free-spins\", async (_req, res) => {\n    try {\n      const offers = await storage.getFreeSpinsOffers();\n      res.json(offers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch free spins offers\" });\n    }\n  });\n\n  app.post(\"/api/free-spins\", async (req, res) => {\n    try {\n      const data = insertFreeSpinsOfferSchema.parse(req.body);\n      const offer = await storage.createFreeSpinsOffer(data);\n      res.json(offer);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid free spins offer data\" });\n    }\n  });\n\n  app.patch(\"/api/free-spins/:id\", async (req, res) => {\n    try {\n      const offer = await storage.updateFreeSpinsOffer(req.params.id, req.body);\n      res.json(offer);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update free spins offer\" });\n    }\n  });\n\n  app.delete(\"/api/free-spins/:id\", async (req, res) => {\n    try {\n      await storage.deleteFreeSpinsOffer(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete free spins offer\" });\n    }\n  });\n\n  // Server time endpoint for accurate countdown timers\n  app.get(\"/api/time\", (_req, res) => {\n    res.json({ timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6629},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/challenges.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Target, DollarSign, TrendingUp, Trophy, ExternalLink } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Challenge } from \"@shared/schema\";\n\nexport default function Challenges() {\n  const { data: challenges = [], isLoading } = useQuery<Challenge[]>({\n    queryKey: [\"/api/challenges\"],\n  });\n\n  const [selectedChallenge, setSelectedChallenge] = useState<Challenge | null>(null);\n  const [username, setUsername] = useState(\"\");\n  const [discordUsername, setDiscordUsername] = useState(\"\");\n  const { toast } = useToast();\n\n  const claimMutation = useMutation({\n    mutationFn: async (data: { id: string; username: string; discordUsername: string }) => {\n      return apiRequest(\"POST\", `/api/challenges/${data.id}/claim`, {\n        username: data.username,\n        discordUsername: data.discordUsername,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Prize Claimed!\",\n        description: \"Join our Discord server and open a ticket to receive your prize.\",\n      });\n      setSelectedChallenge(null);\n      setUsername(\"\");\n      setDiscordUsername(\"\");\n      \n      window.open(\"https://discord.gg/mojotx\", \"_blank\");\n    },\n    onError: () => {\n      toast({\n        title: \"Claim Failed\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClaim = () => {\n    if (!selectedChallenge || !username.trim() || !discordUsername.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    claimMutation.mutate({\n      id: selectedChallenge.id,\n      username: username.trim(),\n      discordUsername: discordUsername.trim(),\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading challenges...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const activeChallenges = challenges.filter((c) => c.isActive && c.claimStatus !== \"claimed\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-6xl mx-auto px-4 py-8 md:py-12 space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-3\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground\">\n            Challenges\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Complete challenges on your favorite slots to win exclusive rewards\n          </p>\n        </div>\n\n        {/* Info Card */}\n        <Card className=\"p-6 border bg-card\">\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg\">How Challenges Work</h3>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-lg font-bold text-primary\">1</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-1\">Choose a Challenge</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Select an active challenge and play the specified slot game\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-lg font-bold text-primary\">2</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-1\">Hit the Target</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Achieve the required multiplier with the minimum bet or higher\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-lg font-bold text-primary\">3</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-1\">Win Rewards</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Complete the challenge to win your share of the prize pool\n                  </p>\n                </div>\n              </div>\n            </div>\n            <p className=\"text-sm text-amber-600 dark:text-amber-500 font-semibold border-t pt-4\">\n              Important: Only bets made after the challenge starts count towards completion.\n            </p>\n          </div>\n        </Card>\n\n        {/* Challenges Grid */}\n        {activeChallenges.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {activeChallenges.map((challenge) => (\n              <Card\n                key={challenge.id}\n                className=\"overflow-hidden hover-elevate transition-all\"\n                data-testid={`card-challenge-${challenge.id}`}\n              >\n                {/* Status Badge */}\n                <div className=\"absolute top-4 right-4 z-10\">\n                  <Badge className=\"bg-primary text-primary-foreground border-0\" data-testid={`badge-status-${challenge.id}`}>\n                    Active\n                  </Badge>\n                </div>\n\n                {/* Game Image */}\n                <div className=\"relative aspect-video overflow-hidden bg-muted\">\n                  <img\n                    src={challenge.gameImage}\n                    alt={challenge.gameName}\n                    className=\"w-full h-full object-cover\"\n                    data-testid={`img-game-${challenge.id}`}\n                  />\n                </div>\n\n                {/* Content */}\n                <div className=\"p-5 space-y-4\">\n                  {/* Game Name */}\n                  <h3 className=\"text-lg font-semibold\" data-testid={`text-game-name-${challenge.id}`}>\n                    {challenge.gameName}\n                  </h3>\n\n                  {/* Requirements */}\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div className=\"space-y-1 p-3 rounded-lg bg-muted\">\n                      <div className=\"flex items-center gap-2 text-muted-foreground text-xs uppercase tracking-wider\">\n                        <TrendingUp className=\"w-3 h-3\" />\n                        Min Multiplier\n                      </div>\n                      <p className=\"text-xl font-bold text-primary\" data-testid={`text-multiplier-${challenge.id}`}>\n                        {Number(challenge.minMultiplier)}x\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-1 p-3 rounded-lg bg-muted\">\n                      <div className=\"flex items-center gap-2 text-muted-foreground text-xs uppercase tracking-wider\">\n                        <DollarSign className=\"w-3 h-3\" />\n                        Min Bet\n                      </div>\n                      <p className=\"text-xl font-bold\" data-testid={`text-min-bet-${challenge.id}`}>\n                        ${Number(challenge.minBet)}\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Prize */}\n                  <div className=\"pt-4 border-t border-border space-y-3\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground mb-1 uppercase tracking-wider\">Prize</p>\n                      <p className=\"text-3xl font-bold text-foreground\" data-testid={`text-prize-${challenge.id}`}>\n                        ${Number(challenge.prize).toLocaleString()}\n                      </p>\n                    </div>\n                    <Button \n                      onClick={() => setSelectedChallenge(challenge)} \n                      className=\"w-full\"\n                      data-testid={`button-claim-${challenge.id}`}\n                    >\n                      <Trophy className=\"w-4 h-4 mr-2\" />\n                      Claim Prize\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-12 text-center\">\n            <Target className=\"w-16 h-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n            <p className=\"text-xl font-semibold mb-2\">No Active Challenges</p>\n            <p className=\"text-muted-foreground\">Check back later for new challenges and opportunities to win!</p>\n          </Card>\n        )}\n      </div>\n\n      {/* Claim Prize Modal */}\n      <Dialog open={!!selectedChallenge} onOpenChange={(open) => !open && setSelectedChallenge(null)}>\n        <DialogContent data-testid=\"dialog-claim-prize\">\n          <DialogHeader>\n            <DialogTitle>Claim Your Prize</DialogTitle>\n            <DialogDescription>\n              Fill in your details to claim your prize for {selectedChallenge?.gameName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Gamdom Username</Label>\n              <Input\n                id=\"username\"\n                placeholder=\"Enter your Gamdom username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"discord\">Discord Username</Label>\n              <Input\n                id=\"discord\"\n                placeholder=\"Enter your Discord username\"\n                value={discordUsername}\n                onChange={(e) => setDiscordUsername(e.target.value)}\n                data-testid=\"input-discord\"\n              />\n            </div>\n            <Card className=\"p-4 bg-muted\">\n              <p className=\"text-sm text-muted-foreground\">\n                After claiming, you'll be redirected to join our Discord server. Open a ticket to verify your win and receive your prize.\n              </p>\n            </Card>\n          </div>\n          <DialogFooter className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={() => setSelectedChallenge(null)} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleClaim} \n              disabled={claimMutation.isPending}\n              data-testid=\"button-submit-claim\"\n            >\n              {claimMutation.isPending ? \"Claiming...\" : \"Claim & Join Discord\"}\n              <ExternalLink className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":11582},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { \n  Plus, Trash2, Save, Settings as SettingsIcon, Pencil, Lock, X,\n  LayoutDashboard, Trophy, Target, Gift, Users\n} from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type {\n  LeaderboardEntry,\n  LeaderboardSettings,\n  LevelMilestone,\n  Challenge,\n  FreeSpinsOffer,\n  InsertLeaderboardEntry,\n  InsertLeaderboardSettings,\n  InsertLevelMilestone,\n  InsertChallenge,\n  InsertFreeSpinsOffer,\n} from \"@shared/schema\";\n\nconst ADMIN_PASSWORD = import.meta.env.VITE_ADMIN_PASSWORD || \"mojotx2024\";\n\nfunction PasswordGate({ onAuthenticated }: { onAuthenticated: () => void }) {\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (password === ADMIN_PASSWORD) {\n      onAuthenticated();\n    } else {\n      setError(true);\n      setPassword(\"\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-black\">\n      <Card className=\"w-full max-w-md mx-4 p-8 shadow-xl bg-zinc-900 border-zinc-800\">\n        <div className=\"flex flex-col items-center gap-6\">\n          <div className=\"w-20 h-20 rounded-full bg-red-600/20 border border-red-600/30 flex items-center justify-center\">\n            <Lock className=\"w-10 h-10 text-red-500\" />\n          </div>\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold text-white mb-2\">\n              Admin Panel\n            </h1>\n            <p className=\"text-sm text-zinc-400\">\n              Enter your password to continue\n            </p>\n          </div>\n          <form onSubmit={handleSubmit} className=\"w-full space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-zinc-300\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => {\n                  setPassword(e.target.value);\n                  setError(false);\n                }}\n                placeholder=\"Enter admin password\"\n                data-testid=\"input-admin-password\"\n                className={`bg-zinc-800 border-zinc-700 text-white placeholder:text-zinc-500 ${error ? \"border-red-500\" : \"\"}`}\n              />\n              {error && (\n                <p className=\"text-sm text-red-500\">\n                  Incorrect password. Please try again.\n                </p>\n              )}\n            </div>\n            <Button type=\"submit\" className=\"w-full bg-red-600 hover:bg-red-700 text-white\" data-testid=\"button-admin-login\">\n              Access Admin Panel\n            </Button>\n          </form>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\ntype NavSection = \"leaderboard\" | \"milestones\" | \"challenges\" | \"free-spins\" | \"settings\";\n\nexport default function Admin() {\n  const [activeSection, setActiveSection] = useState<NavSection>(\"leaderboard\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  if (!isAuthenticated) {\n    return <PasswordGate onAuthenticated={() => setIsAuthenticated(true)} />;\n  }\n\n  const navItems = [\n    { id: \"leaderboard\" as NavSection, label: \"Leaderboard\", icon: Trophy, testId: \"tab-leaderboard\" },\n    { id: \"milestones\" as NavSection, label: \"Milestones\", icon: Target, testId: \"tab-milestones\" },\n    { id: \"challenges\" as NavSection, label: \"Challenges\", icon: Users, testId: \"tab-challenges\" },\n    { id: \"free-spins\" as NavSection, label: \"Free Spins\", icon: Gift, testId: \"tab-free-spins\" },\n    { id: \"settings\" as NavSection, label: \"Settings\", icon: SettingsIcon, testId: \"tab-settings\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black flex\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-zinc-950 border-r border-zinc-800 flex flex-col\">\n        {/* Logo/Header */}\n        <div className=\"p-6 border-b border-zinc-800\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-red-600/20 border border-red-600/30 flex items-center justify-center\">\n              <LayoutDashboard className=\"w-5 h-5 text-red-500\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-white\">Admin Panel</h1>\n              <p className=\"text-xs text-zinc-500\">Management</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 p-4\">\n          <div className=\"space-y-1\">\n            <div className=\"text-xs font-semibold text-zinc-600 uppercase tracking-wider mb-3 px-3\">\n              MAIN\n            </div>\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = activeSection === item.id;\n              return (\n                <button\n                  key={item.id}\n                  onClick={() => setActiveSection(item.id)}\n                  data-testid={item.testId}\n                  className={`\n                    w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-sm font-medium transition-all\n                    ${isActive \n                      ? 'bg-red-600/20 text-red-500 border border-red-600/30' \n                      : 'text-zinc-400 hover:text-white hover:bg-zinc-900'\n                    }\n                  `}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <span>{item.label}</span>\n                </button>\n              );\n            })}\n          </div>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"p-8\">\n          {activeSection === \"leaderboard\" && <LeaderboardAdmin />}\n          {activeSection === \"milestones\" && <MilestonesAdmin />}\n          {activeSection === \"challenges\" && <ChallengesAdmin />}\n          {activeSection === \"free-spins\" && <FreeSpinsAdmin />}\n          {activeSection === \"settings\" && <SettingsAdmin />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction LeaderboardAdmin() {\n  const { toast } = useToast();\n  const { data: entries } = useQuery<LeaderboardEntry[]>({\n    queryKey: [\"/api/leaderboard/entries\"],\n  });\n\n  const [newEntry, setNewEntry] = useState<InsertLeaderboardEntry>({\n    rank: 1,\n    username: \"\",\n    wagered: \"0\",\n    prize: \"0\",\n  });\n\n  const [editingEntry, setEditingEntry] = useState<LeaderboardEntry | null>(null);\n  const [editData, setEditData] = useState<InsertLeaderboardEntry>({\n    rank: 1,\n    username: \"\",\n    wagered: \"0\",\n    prize: \"0\",\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertLeaderboardEntry) =>\n      apiRequest(\"POST\", \"/api/leaderboard/entries\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/entries\"] });\n      toast({ title: \"Entry added successfully\" });\n      setNewEntry({ rank: 1, username: \"\", wagered: \"0\", prize: \"0\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertLeaderboardEntry> }) =>\n      apiRequest(\"PATCH\", `/api/leaderboard/entries/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/entries\"] });\n      toast({ title: \"Entry updated successfully\" });\n      setEditingEntry(null);\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/leaderboard/entries/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/entries\"] });\n      toast({ title: \"Entry deleted successfully\" });\n    },\n  });\n\n  const openEdit = (entry: LeaderboardEntry) => {\n    setEditingEntry(entry);\n    setEditData({\n      rank: entry.rank,\n      username: entry.username,\n      wagered: entry.wagered,\n      prize: entry.prize,\n    });\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-6xl\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-white mb-2\">Leaderboard Management</h2>\n        <p className=\"text-zinc-400\">Add and manage leaderboard entries</p>\n      </div>\n\n      <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n        <h3 className=\"text-lg font-semibold mb-6 text-white\">Add Leaderboard Entry</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"rank\" className=\"text-sm font-medium text-zinc-300\">Rank</Label>\n            <Input\n              id=\"rank\"\n              type=\"number\"\n              value={newEntry.rank}\n              onChange={(e) => setNewEntry({ ...newEntry, rank: parseInt(e.target.value) || 1 })}\n              data-testid=\"input-rank\"\n              className=\"bg-zinc-800 border-zinc-700 text-white\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\" className=\"text-sm font-medium text-zinc-300\">Username</Label>\n            <Input\n              id=\"username\"\n              value={newEntry.username}\n              onChange={(e) => setNewEntry({ ...newEntry, username: e.target.value })}\n              data-testid=\"input-username\"\n              className=\"bg-zinc-800 border-zinc-700 text-white\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"wagered\" className=\"text-sm font-medium text-zinc-300\">Wagered ($)</Label>\n            <Input\n              id=\"wagered\"\n              type=\"number\"\n              step=\"0.01\"\n              value={newEntry.wagered}\n              onChange={(e) => setNewEntry({ ...newEntry, wagered: e.target.value })}\n              data-testid=\"input-wagered\"\n              className=\"bg-zinc-800 border-zinc-700 text-white\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"prize\" className=\"text-sm font-medium text-zinc-300\">Prize ($)</Label>\n            <Input\n              id=\"prize\"\n              type=\"number\"\n              step=\"0.01\"\n              value={newEntry.prize}\n              onChange={(e) => setNewEntry({ ...newEntry, prize: e.target.value })}\n              data-testid=\"input-prize\"\n              className=\"bg-zinc-800 border-zinc-700 text-white\"\n            />\n          </div>\n        </div>\n        <Button\n          onClick={() => createMutation.mutate(newEntry)}\n          disabled={createMutation.isPending || !newEntry.username}\n          className=\"mt-6 bg-red-600 hover:bg-red-700 text-white\"\n          data-testid=\"button-add-entry\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Entry\n        </Button>\n      </Card>\n\n      <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n        <h3 className=\"text-lg font-semibold mb-6 text-white\">Current Entries</h3>\n        <div className=\"space-y-3\">\n          {entries?.map((entry) => (\n            <div\n              key={entry.id}\n              className=\"flex items-center justify-between p-4 bg-zinc-950 border border-zinc-800 rounded-lg hover:border-zinc-700 transition-colors\"\n              data-testid={`entry-${entry.id}`}\n            >\n              <div className=\"flex items-center gap-4 flex-1\">\n                <div className=\"w-12 h-12 rounded-full bg-red-600/20 border border-red-600/30 flex items-center justify-center text-red-500 font-bold text-lg\">\n                  #{entry.rank}\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"font-semibold text-white\">{entry.username}</div>\n                  <div className=\"text-sm text-zinc-400\">\n                    Wagered: ${Number(entry.wagered).toLocaleString()} • Prize: ${Number(entry.prize).toLocaleString()}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => openEdit(entry)}\n                  data-testid={`button-edit-${entry.id}`}\n                  className=\"hover:bg-zinc-800 text-zinc-400 hover:text-white\"\n                >\n                  <Pencil className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => deleteMutation.mutate(entry.id)}\n                  disabled={deleteMutation.isPending}\n                  data-testid={`button-delete-${entry.id}`}\n                  className=\"hover:bg-red-600/20 text-red-500\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n          {(!entries || entries.length === 0) && (\n            <div className=\"text-center py-12 text-zinc-500\">\n              <p>No entries yet. Add your first entry above.</p>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      <Dialog open={!!editingEntry} onOpenChange={(open) => !open && setEditingEntry(null)}>\n        <DialogContent className=\"bg-zinc-900 border-zinc-800 text-white\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Edit Leaderboard Entry</DialogTitle>\n            <DialogDescription className=\"text-zinc-400\">Update the leaderboard entry details.</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-rank\" className=\"text-sm font-medium text-zinc-300\">Rank</Label>\n              <Input\n                id=\"edit-rank\"\n                type=\"number\"\n                value={editData.rank}\n                onChange={(e) => setEditData({ ...editData, rank: parseInt(e.target.value) || 1 })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-username\" className=\"text-sm font-medium text-zinc-300\">Username</Label>\n              <Input\n                id=\"edit-username\"\n                value={editData.username}\n                onChange={(e) => setEditData({ ...editData, username: e.target.value })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-wagered\" className=\"text-sm font-medium text-zinc-300\">Wagered ($)</Label>\n              <Input\n                id=\"edit-wagered\"\n                type=\"number\"\n                step=\"0.01\"\n                value={editData.wagered}\n                onChange={(e) => setEditData({ ...editData, wagered: e.target.value })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-prize\" className=\"text-sm font-medium text-zinc-300\">Prize ($)</Label>\n              <Input\n                id=\"edit-prize\"\n                type=\"number\"\n                step=\"0.01\"\n                value={editData.prize}\n                onChange={(e) => setEditData({ ...editData, prize: e.target.value })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <Button\n              onClick={() => editingEntry && updateMutation.mutate({ id: editingEntry.id, data: editData })}\n              disabled={updateMutation.isPending}\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction MilestonesAdmin() {\n  const { toast } = useToast();\n  const { data: milestones } = useQuery<LevelMilestone[]>({\n    queryKey: [\"/api/milestones\"],\n  });\n\n  const [newMilestone, setNewMilestone] = useState<InsertLevelMilestone>({\n    name: \"\",\n    tier: 1,\n    imageUrl: \"\",\n    rewards: [],\n  });\n  const [rewardInput, setRewardInput] = useState(\"\");\n  const [editingMilestone, setEditingMilestone] = useState<LevelMilestone | null>(null);\n  const [editData, setEditData] = useState<InsertLevelMilestone>({\n    name: \"\",\n    tier: 1,\n    imageUrl: \"\",\n    rewards: [],\n  });\n  const [editRewardInput, setEditRewardInput] = useState(\"\");\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertLevelMilestone) =>\n      apiRequest(\"POST\", \"/api/milestones\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/milestones\"] });\n      toast({ title: \"Milestone added successfully\" });\n      setNewMilestone({ name: \"\", tier: 1, imageUrl: \"\", rewards: [] });\n      setRewardInput(\"\");\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertLevelMilestone> }) =>\n      apiRequest(\"PATCH\", `/api/milestones/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/milestones\"] });\n      toast({ title: \"Milestone updated successfully\" });\n      setEditingMilestone(null);\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/milestones/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/milestones\"] });\n      toast({ title: \"Milestone deleted successfully\" });\n    },\n  });\n\n  const addReward = () => {\n    if (rewardInput.trim()) {\n      setNewMilestone({ ...newMilestone, rewards: [...newMilestone.rewards, rewardInput.trim()] });\n      setRewardInput(\"\");\n    }\n  };\n\n  const removeReward = (index: number) => {\n    setNewMilestone({\n      ...newMilestone,\n      rewards: newMilestone.rewards.filter((_, i) => i !== index),\n    });\n  };\n\n  const openEdit = (milestone: LevelMilestone) => {\n    setEditingMilestone(milestone);\n    setEditData({\n      name: milestone.name,\n      tier: milestone.tier,\n      imageUrl: milestone.imageUrl,\n      rewards: [...milestone.rewards],\n    });\n    setEditRewardInput(\"\");\n  };\n\n  const addEditReward = () => {\n    if (editRewardInput.trim()) {\n      setEditData({ ...editData, rewards: [...editData.rewards, editRewardInput.trim()] });\n      setEditRewardInput(\"\");\n    }\n  };\n\n  const removeEditReward = (index: number) => {\n    setEditData({\n      ...editData,\n      rewards: editData.rewards.filter((_, i) => i !== index),\n    });\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-6xl\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-white mb-2\">Milestones Management</h2>\n        <p className=\"text-zinc-400\">Add and manage level milestones</p>\n      </div>\n\n      <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n        <h3 className=\"text-lg font-semibold mb-6 text-white\">Add Milestone</h3>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\" className=\"text-sm font-medium text-zinc-300\">Name</Label>\n              <Input\n                id=\"name\"\n                value={newMilestone.name}\n                onChange={(e) => setNewMilestone({ ...newMilestone, name: e.target.value })}\n                placeholder=\"e.g., Bronze 1\"\n                data-testid=\"input-milestone-name\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"tier\" className=\"text-sm font-medium text-zinc-300\">Tier</Label>\n              <Input\n                id=\"tier\"\n                type=\"number\"\n                value={newMilestone.tier}\n                onChange={(e) => setNewMilestone({ ...newMilestone, tier: parseInt(e.target.value) || 1 })}\n                data-testid=\"input-tier\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"imageUrl\" className=\"text-sm font-medium text-zinc-300\">Image URL</Label>\n              <Input\n                id=\"imageUrl\"\n                value={newMilestone.imageUrl}\n                onChange={(e) => setNewMilestone({ ...newMilestone, imageUrl: e.target.value })}\n                data-testid=\"input-image-url\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"reward\" className=\"text-sm font-medium text-zinc-300\">Rewards</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"reward\"\n                value={rewardInput}\n                onChange={(e) => setRewardInput(e.target.value)}\n                placeholder=\"Enter a reward\"\n                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addReward())}\n                data-testid=\"input-reward\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n              <Button onClick={addReward} type=\"button\" data-testid=\"button-add-reward\" className=\"bg-red-600 hover:bg-red-700 text-white\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            {newMilestone.rewards.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {newMilestone.rewards.map((reward, index) => (\n                  <Badge\n                    key={index}\n                    variant=\"secondary\"\n                    className=\"flex items-center gap-2 bg-zinc-800 text-zinc-300 border-zinc-700\"\n                  >\n                    <span className=\"text-sm\">{reward}</span>\n                    <button\n                      onClick={() => removeReward(index)}\n                      className=\"hover:text-white\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <Button\n            onClick={() => createMutation.mutate(newMilestone)}\n            disabled={createMutation.isPending || !newMilestone.name}\n            data-testid=\"button-add-milestone\"\n            className=\"bg-red-600 hover:bg-red-700 text-white\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Milestone\n          </Button>\n        </div>\n      </Card>\n\n      <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n        <h3 className=\"text-lg font-semibold mb-6 text-white\">Current Milestones</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {milestones?.map((milestone) => (\n            <Card key={milestone.id} className=\"p-4 relative bg-zinc-950 border-zinc-800 hover:border-zinc-700 transition-colors\">\n              <div className=\"flex gap-2 absolute top-2 right-2\">\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => openEdit(milestone)}\n                  data-testid={`button-edit-milestone-${milestone.id}`}\n                  className=\"h-8 w-8 hover:bg-zinc-800 text-zinc-400 hover:text-white\"\n                >\n                  <Pencil className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => deleteMutation.mutate(milestone.id)}\n                  disabled={deleteMutation.isPending}\n                  data-testid={`button-delete-milestone-${milestone.id}`}\n                  className=\"h-8 w-8 hover:bg-red-600/20 text-red-500\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <div className=\"mb-3\">\n                {milestone.imageUrl && (\n                  <img src={milestone.imageUrl} alt={milestone.name} className=\"w-16 h-16 rounded-lg mb-3 object-cover border border-zinc-800\" />\n                )}\n                <h4 className=\"font-semibold text-white\">{milestone.name}</h4>\n                <p className=\"text-sm text-zinc-400\">Tier {milestone.tier}</p>\n              </div>\n              {milestone.rewards.length > 0 && (\n                <div className=\"text-xs text-zinc-500 mt-2\">\n                  {milestone.rewards.join(\", \")}\n                </div>\n              )}\n            </Card>\n          ))}\n          {(!milestones || milestones.length === 0) && (\n            <div className=\"col-span-full text-center py-12 text-zinc-500\">\n              <p>No milestones yet. Add your first milestone above.</p>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      <Dialog open={!!editingMilestone} onOpenChange={(open) => !open && setEditingMilestone(null)}>\n        <DialogContent className=\"bg-zinc-900 border-zinc-800 text-white\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Edit Milestone</DialogTitle>\n            <DialogDescription className=\"text-zinc-400\">Update the milestone details.</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-name\" className=\"text-sm font-medium text-zinc-300\">Name</Label>\n              <Input\n                id=\"edit-name\"\n                value={editData.name}\n                onChange={(e) => setEditData({ ...editData, name: e.target.value })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-tier\" className=\"text-sm font-medium text-zinc-300\">Tier</Label>\n              <Input\n                id=\"edit-tier\"\n                type=\"number\"\n                value={editData.tier}\n                onChange={(e) => setEditData({ ...editData, tier: parseInt(e.target.value) || 1 })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-imageUrl\" className=\"text-sm font-medium text-zinc-300\">Image URL</Label>\n              <Input\n                id=\"edit-imageUrl\"\n                value={editData.imageUrl}\n                onChange={(e) => setEditData({ ...editData, imageUrl: e.target.value })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-reward\" className=\"text-sm font-medium text-zinc-300\">Rewards</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"edit-reward\"\n                  value={editRewardInput}\n                  onChange={(e) => setEditRewardInput(e.target.value)}\n                  placeholder=\"Enter a reward\"\n                  onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addEditReward())}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n                <Button onClick={addEditReward} type=\"button\" className=\"bg-red-600 hover:bg-red-700 text-white\">\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              {editData.rewards.length > 0 && (\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {editData.rewards.map((reward, index) => (\n                    <Badge\n                      key={index}\n                      variant=\"secondary\"\n                      className=\"flex items-center gap-2 bg-zinc-800 text-zinc-300 border-zinc-700\"\n                    >\n                      <span className=\"text-sm\">{reward}</span>\n                      <button\n                        onClick={() => removeEditReward(index)}\n                        className=\"hover:text-white\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n            <Button\n              onClick={() => editingMilestone && updateMutation.mutate({ id: editingMilestone.id, data: editData })}\n              disabled={updateMutation.isPending}\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction ChallengesAdmin() {\n  const { toast } = useToast();\n  const { data: challenges } = useQuery<Challenge[]>({\n    queryKey: [\"/api/challenges\"],\n  });\n\n  const [newChallenge, setNewChallenge] = useState<InsertChallenge>({\n    gameName: \"\",\n    gameImage: \"\",\n    minMultiplier: \"1\",\n    minBet: \"0\",\n    prize: \"0\",\n    isActive: true,\n  });\n\n  const [editingChallenge, setEditingChallenge] = useState<Challenge | null>(null);\n  const [editData, setEditData] = useState<InsertChallenge>({\n    gameName: \"\",\n    gameImage: \"\",\n    minMultiplier: \"1\",\n    minBet: \"0\",\n    prize: \"0\",\n    isActive: true,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertChallenge) =>\n      apiRequest(\"POST\", \"/api/challenges\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      toast({ title: \"Challenge added successfully\" });\n      setNewChallenge({\n        gameName: \"\",\n        gameImage: \"\",\n        minMultiplier: \"1\",\n        minBet: \"0\",\n        prize: \"0\",\n        isActive: true,\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertChallenge> }) =>\n      apiRequest(\"PATCH\", `/api/challenges/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      toast({ title: \"Challenge updated successfully\" });\n      setEditingChallenge(null);\n    },\n  });\n\n  const toggleActiveMutation = useMutation({\n    mutationFn: ({ id, isActive }: { id: string; isActive: boolean }) =>\n      apiRequest(\"PATCH\", `/api/challenges/${id}`, { isActive }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      toast({ title: \"Challenge updated successfully\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/challenges/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      toast({ title: \"Challenge deleted successfully\" });\n    },\n  });\n\n  const openEdit = (challenge: Challenge) => {\n    setEditingChallenge(challenge);\n    setEditData({\n      gameName: challenge.gameName,\n      gameImage: challenge.gameImage,\n      minMultiplier: challenge.minMultiplier,\n      minBet: challenge.minBet,\n      prize: challenge.prize,\n      isActive: challenge.isActive,\n    });\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-6xl\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-white mb-2\">Challenges Management</h2>\n        <p className=\"text-zinc-400\">Add and manage game challenges</p>\n      </div>\n\n      <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n        <h3 className=\"text-lg font-semibold mb-6 text-white\">Add Challenge</h3>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gameName\" className=\"text-sm font-medium text-zinc-300\">Game Name</Label>\n              <Input\n                id=\"gameName\"\n                value={newChallenge.gameName}\n                onChange={(e) => setNewChallenge({ ...newChallenge, gameName: e.target.value })}\n                data-testid=\"input-game-name\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gameImage\" className=\"text-sm font-medium text-zinc-300\">Game Image URL</Label>\n              <Input\n                id=\"gameImage\"\n                value={newChallenge.gameImage}\n                onChange={(e) => setNewChallenge({ ...newChallenge, gameImage: e.target.value })}\n                data-testid=\"input-game-image\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"minMultiplier\" className=\"text-sm font-medium text-zinc-300\">Min Multiplier</Label>\n              <Input\n                id=\"minMultiplier\"\n                type=\"number\"\n                step=\"0.01\"\n                value={newChallenge.minMultiplier}\n                onChange={(e) => setNewChallenge({ ...newChallenge, minMultiplier: e.target.value })}\n                data-testid=\"input-min-multiplier\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"minBet\" className=\"text-sm font-medium text-zinc-300\">Min Bet ($)</Label>\n              <Input\n                id=\"minBet\"\n                type=\"number\"\n                step=\"0.01\"\n                value={newChallenge.minBet}\n                onChange={(e) => setNewChallenge({ ...newChallenge, minBet: e.target.value })}\n                data-testid=\"input-min-bet\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"prize\" className=\"text-sm font-medium text-zinc-300\">Prize ($)</Label>\n              <Input\n                id=\"prize\"\n                type=\"number\"\n                step=\"0.01\"\n                value={newChallenge.prize}\n                onChange={(e) => setNewChallenge({ ...newChallenge, prize: e.target.value })}\n                data-testid=\"input-challenge-prize\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2 pt-6\">\n              <Switch\n                id=\"isActive\"\n                checked={newChallenge.isActive}\n                onCheckedChange={(checked) => setNewChallenge({ ...newChallenge, isActive: checked })}\n                data-testid=\"switch-is-active\"\n              />\n              <Label htmlFor=\"isActive\" className=\"text-sm font-medium text-zinc-300\">Active</Label>\n            </div>\n          </div>\n\n          <Button\n            onClick={() => createMutation.mutate(newChallenge)}\n            disabled={createMutation.isPending || !newChallenge.gameName}\n            data-testid=\"button-add-challenge\"\n            className=\"bg-red-600 hover:bg-red-700 text-white\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Challenge\n          </Button>\n        </div>\n      </Card>\n\n      <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n        <h3 className=\"text-lg font-semibold mb-6 text-white\">Current Challenges</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {challenges?.map((challenge) => (\n            <Card key={challenge.id} className=\"p-4 bg-zinc-950 border-zinc-800 hover:border-zinc-700 transition-colors\" data-testid={`challenge-${challenge.id}`}>\n              <div className=\"flex gap-4\">\n                {challenge.gameImage && (\n                  <img src={challenge.gameImage} alt={challenge.gameName} className=\"w-20 h-20 rounded-lg object-cover border border-zinc-800\" />\n                )}\n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h4 className=\"font-semibold text-white\">{challenge.gameName}</h4>\n                      <div className=\"text-xs text-zinc-400 mt-1\">\n                        {challenge.minMultiplier}x • ${Number(challenge.minBet).toFixed(2)} bet\n                      </div>\n                    </div>\n                    <Badge className={challenge.isActive ? \"bg-green-600/20 text-green-500 border-green-600/30\" : \"bg-zinc-800 text-zinc-500 border-zinc-700\"}>\n                      {challenge.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-zinc-300 mb-3\">\n                    Prize: ${Number(challenge.prize).toLocaleString()}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => toggleActiveMutation.mutate({ id: challenge.id, isActive: !challenge.isActive })}\n                      disabled={toggleActiveMutation.isPending}\n                      data-testid={`button-toggle-${challenge.id}`}\n                      className=\"hover:bg-zinc-800 text-zinc-400 hover:text-white\"\n                    >\n                      {challenge.isActive ? \"Deactivate\" : \"Activate\"}\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => openEdit(challenge)}\n                      data-testid={`button-edit-challenge-${challenge.id}`}\n                      className=\"hover:bg-zinc-800 text-zinc-400 hover:text-white\"\n                    >\n                      <Pencil className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => deleteMutation.mutate(challenge.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-challenge-${challenge.id}`}\n                      className=\"hover:bg-red-600/20 text-red-500\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n          {(!challenges || challenges.length === 0) && (\n            <div className=\"col-span-full text-center py-12 text-zinc-500\">\n              <p>No challenges yet. Add your first challenge above.</p>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      <Dialog open={!!editingChallenge} onOpenChange={(open) => !open && setEditingChallenge(null)}>\n        <DialogContent className=\"bg-zinc-900 border-zinc-800 text-white\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Edit Challenge</DialogTitle>\n            <DialogDescription className=\"text-zinc-400\">Update the challenge details.</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-gameName\" className=\"text-sm font-medium text-zinc-300\">Game Name</Label>\n              <Input\n                id=\"edit-gameName\"\n                value={editData.gameName}\n                onChange={(e) => setEditData({ ...editData, gameName: e.target.value })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-gameImage\" className=\"text-sm font-medium text-zinc-300\">Game Image URL</Label>\n              <Input\n                id=\"edit-gameImage\"\n                value={editData.gameImage}\n                onChange={(e) => setEditData({ ...editData, gameImage: e.target.value })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-minMultiplier\" className=\"text-sm font-medium text-zinc-300\">Min Multiplier</Label>\n                <Input\n                  id=\"edit-minMultiplier\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editData.minMultiplier}\n                  onChange={(e) => setEditData({ ...editData, minMultiplier: e.target.value })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-minBet\" className=\"text-sm font-medium text-zinc-300\">Min Bet ($)</Label>\n                <Input\n                  id=\"edit-minBet\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editData.minBet}\n                  onChange={(e) => setEditData({ ...editData, minBet: e.target.value })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-challenge-prize\" className=\"text-sm font-medium text-zinc-300\">Prize ($)</Label>\n              <Input\n                id=\"edit-challenge-prize\"\n                type=\"number\"\n                step=\"0.01\"\n                value={editData.prize}\n                onChange={(e) => setEditData({ ...editData, prize: e.target.value })}\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"edit-isActive\"\n                checked={editData.isActive}\n                onCheckedChange={(checked) => setEditData({ ...editData, isActive: checked })}\n              />\n              <Label htmlFor=\"edit-isActive\" className=\"text-sm font-medium text-zinc-300\">Active</Label>\n            </div>\n            <Button\n              onClick={() => editingChallenge && updateMutation.mutate({ id: editingChallenge.id, data: editData })}\n              disabled={updateMutation.isPending}\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction FreeSpinsAdmin() {\n  const { toast } = useToast();\n  const { data: offers } = useQuery<FreeSpinsOffer[]>({\n    queryKey: [\"/api/free-spins\"],\n  });\n\n  const [newOffer, setNewOffer] = useState<InsertFreeSpinsOffer>({\n    code: \"\",\n    gameName: \"\",\n    gameProvider: \"\",\n    gameImage: \"\",\n    spinsCount: 100,\n    spinValue: \"0.20\",\n    totalClaims: 10,\n    claimsRemaining: 10,\n    expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n    requirements: [],\n    isActive: true,\n  });\n  const [reqInput, setReqInput] = useState(\"\");\n\n  const [editingOffer, setEditingOffer] = useState<FreeSpinsOffer | null>(null);\n  const [editData, setEditData] = useState<InsertFreeSpinsOffer>({\n    code: \"\",\n    gameName: \"\",\n    gameProvider: \"\",\n    gameImage: \"\",\n    spinsCount: 100,\n    spinValue: \"0.20\",\n    totalClaims: 10,\n    claimsRemaining: 10,\n    expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n    requirements: [],\n    isActive: true,\n  });\n  const [editReqInput, setEditReqInput] = useState(\"\");\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertFreeSpinsOffer) => {\n      const payload = {\n        ...data,\n        expiresAt: data.expiresAt instanceof Date ? data.expiresAt.toISOString() : data.expiresAt,\n      };\n      return apiRequest(\"POST\", \"/api/free-spins\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/free-spins\"] });\n      toast({ title: \"Free spins offer added successfully\" });\n      setNewOffer({\n        code: \"\",\n        gameName: \"\",\n        gameProvider: \"\",\n        gameImage: \"\",\n        spinsCount: 100,\n        spinValue: \"0.20\",\n        totalClaims: 10,\n        claimsRemaining: 10,\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        requirements: [],\n        isActive: true,\n      });\n      setReqInput(\"\");\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertFreeSpinsOffer> }) => {\n      const payload = {\n        ...data,\n        expiresAt: data.expiresAt instanceof Date ? data.expiresAt.toISOString() : data.expiresAt,\n      };\n      return apiRequest(\"PATCH\", `/api/free-spins/${id}`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/free-spins\"] });\n      toast({ title: \"Free spins offer updated successfully\" });\n      setEditingOffer(null);\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/free-spins/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/free-spins\"] });\n      toast({ title: \"Offer deleted successfully\" });\n    },\n  });\n\n  const addRequirement = () => {\n    if (reqInput.trim()) {\n      setNewOffer({ ...newOffer, requirements: [...newOffer.requirements, reqInput.trim()] });\n      setReqInput(\"\");\n    }\n  };\n\n  const removeRequirement = (index: number) => {\n    setNewOffer({\n      ...newOffer,\n      requirements: newOffer.requirements.filter((_, i) => i !== index),\n    });\n  };\n\n  const openEdit = (offer: FreeSpinsOffer) => {\n    setEditingOffer(offer);\n    setEditData({\n      code: offer.code,\n      gameName: offer.gameName,\n      gameProvider: offer.gameProvider,\n      gameImage: offer.gameImage,\n      spinsCount: offer.spinsCount,\n      spinValue: offer.spinValue,\n      totalClaims: offer.totalClaims,\n      claimsRemaining: offer.claimsRemaining,\n      expiresAt: new Date(offer.expiresAt),\n      requirements: [...offer.requirements],\n      isActive: offer.isActive,\n    });\n    setEditReqInput(\"\");\n  };\n\n  const addEditRequirement = () => {\n    if (editReqInput.trim()) {\n      setEditData({ ...editData, requirements: [...editData.requirements, editReqInput.trim()] });\n      setEditReqInput(\"\");\n    }\n  };\n\n  const removeEditRequirement = (index: number) => {\n    setEditData({\n      ...editData,\n      requirements: editData.requirements.filter((_, i) => i !== index),\n    });\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-6xl\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-white mb-2\">Free Spins Management</h2>\n        <p className=\"text-zinc-400\">Add and manage free spins offers</p>\n      </div>\n\n      <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n        <h3 className=\"text-lg font-semibold mb-6 text-white\">Add Free Spins Offer</h3>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"code\" className=\"text-sm font-medium text-zinc-300\">Code</Label>\n              <Input\n                id=\"code\"\n                value={newOffer.code}\n                onChange={(e) => setNewOffer({ ...newOffer, code: e.target.value })}\n                data-testid=\"input-code\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gameName\" className=\"text-sm font-medium text-zinc-300\">Game Name</Label>\n              <Input\n                id=\"gameName\"\n                value={newOffer.gameName}\n                onChange={(e) => setNewOffer({ ...newOffer, gameName: e.target.value })}\n                data-testid=\"input-game-name-fs\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gameProvider\" className=\"text-sm font-medium text-zinc-300\">Game Provider</Label>\n              <Input\n                id=\"gameProvider\"\n                value={newOffer.gameProvider}\n                onChange={(e) => setNewOffer({ ...newOffer, gameProvider: e.target.value })}\n                data-testid=\"input-game-provider\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gameImage\" className=\"text-sm font-medium text-zinc-300\">Game Image URL</Label>\n              <Input\n                id=\"gameImage\"\n                value={newOffer.gameImage}\n                onChange={(e) => setNewOffer({ ...newOffer, gameImage: e.target.value })}\n                data-testid=\"input-game-image-fs\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"spinsCount\" className=\"text-sm font-medium text-zinc-300\">Spins Count</Label>\n              <Input\n                id=\"spinsCount\"\n                type=\"number\"\n                value={newOffer.spinsCount}\n                onChange={(e) => setNewOffer({ ...newOffer, spinsCount: parseInt(e.target.value) || 0 })}\n                data-testid=\"input-spins-count\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"spinValue\" className=\"text-sm font-medium text-zinc-300\">Spin Value ($)</Label>\n              <Input\n                id=\"spinValue\"\n                type=\"number\"\n                step=\"0.01\"\n                value={newOffer.spinValue}\n                onChange={(e) => setNewOffer({ ...newOffer, spinValue: e.target.value })}\n                data-testid=\"input-spin-value\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"totalClaims\" className=\"text-sm font-medium text-zinc-300\">Total Claims</Label>\n              <Input\n                id=\"totalClaims\"\n                type=\"number\"\n                value={newOffer.totalClaims}\n                onChange={(e) => setNewOffer({ \n                  ...newOffer, \n                  totalClaims: parseInt(e.target.value) || 0,\n                  claimsRemaining: parseInt(e.target.value) || 0 \n                })}\n                data-testid=\"input-total-claims\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"expiresAt\" className=\"text-sm font-medium text-zinc-300\">Expires At</Label>\n              <Input\n                id=\"expiresAt\"\n                type=\"datetime-local\"\n                value={new Date(newOffer.expiresAt).toISOString().slice(0, 16)}\n                onChange={(e) => setNewOffer({ ...newOffer, expiresAt: new Date(e.target.value) })}\n                data-testid=\"input-expires-at\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"requirement\" className=\"text-sm font-medium text-zinc-300\">Requirements</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"requirement\"\n                value={reqInput}\n                onChange={(e) => setReqInput(e.target.value)}\n                placeholder=\"Enter a requirement\"\n                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addRequirement())}\n                data-testid=\"input-requirement\"\n                className=\"bg-zinc-800 border-zinc-700 text-white\"\n              />\n              <Button onClick={addRequirement} type=\"button\" data-testid=\"button-add-requirement\" className=\"bg-red-600 hover:bg-red-700 text-white\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            {newOffer.requirements.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {newOffer.requirements.map((req, index) => (\n                  <Badge\n                    key={index}\n                    variant=\"secondary\"\n                    className=\"flex items-center gap-2 bg-zinc-800 text-zinc-300 border-zinc-700\"\n                  >\n                    <span className=\"text-sm\">{req}</span>\n                    <button\n                      onClick={() => removeRequirement(index)}\n                      className=\"hover:text-white\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"isActive\"\n              checked={newOffer.isActive}\n              onCheckedChange={(checked) => setNewOffer({ ...newOffer, isActive: checked })}\n              data-testid=\"switch-is-active-fs\"\n            />\n            <Label htmlFor=\"isActive\" className=\"text-sm font-medium text-zinc-300\">Active</Label>\n          </div>\n\n          <Button\n            onClick={() => createMutation.mutate(newOffer)}\n            disabled={createMutation.isPending || !newOffer.code || !newOffer.gameName}\n            data-testid=\"button-add-offer\"\n            className=\"bg-red-600 hover:bg-red-700 text-white\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Offer\n          </Button>\n        </div>\n      </Card>\n\n      <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n        <h3 className=\"text-lg font-semibold mb-6 text-white\">Current Offers</h3>\n        <div className=\"space-y-3\">\n          {offers?.map((offer) => (\n            <Card key={offer.id} className=\"p-4 bg-zinc-950 border-zinc-800 hover:border-zinc-700 transition-colors\" data-testid={`offer-${offer.id}`}>\n              <div className=\"flex gap-4\">\n                {offer.gameImage && (\n                  <img src={offer.gameImage} alt={offer.gameName} className=\"w-24 h-24 rounded-lg object-cover border border-zinc-800\" />\n                )}\n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h4 className=\"font-semibold text-white\">{offer.gameName}</h4>\n                      <p className=\"text-sm text-zinc-400\">{offer.gameProvider}</p>\n                      <Badge className=\"mt-2 bg-red-600/20 text-red-500 border-red-600/30\">\n                        {offer.code}\n                      </Badge>\n                    </div>\n                    <Badge className={offer.isActive ? \"bg-green-600/20 text-green-500 border-green-600/30\" : \"bg-zinc-800 text-zinc-500 border-zinc-700\"}>\n                      {offer.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-zinc-300 mb-2\">\n                    {offer.spinsCount} spins × ${Number(offer.spinValue).toFixed(2)} = ${(offer.spinsCount * Number(offer.spinValue)).toFixed(2)}\n                  </div>\n                  <div className=\"text-xs text-zinc-500 mb-2\">\n                    Claims: {offer.claimsRemaining}/{offer.totalClaims} • Expires: {new Date(offer.expiresAt).toLocaleDateString()}\n                  </div>\n                  {offer.requirements.length > 0 && (\n                    <div className=\"text-xs text-zinc-500 mb-3\">\n                      Requirements: {offer.requirements.join(\", \")}\n                    </div>\n                  )}\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => openEdit(offer)}\n                      data-testid={`button-edit-offer-${offer.id}`}\n                      className=\"hover:bg-zinc-800 text-zinc-400 hover:text-white\"\n                    >\n                      <Pencil className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => deleteMutation.mutate(offer.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-offer-${offer.id}`}\n                      className=\"hover:bg-red-600/20 text-red-500\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n          {(!offers || offers.length === 0) && (\n            <div className=\"text-center py-12 text-zinc-500\">\n              <p>No offers yet. Add your first offer above.</p>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      <Dialog open={!!editingOffer} onOpenChange={(open) => !open && setEditingOffer(null)}>\n        <DialogContent className=\"bg-zinc-900 border-zinc-800 text-white max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Edit Free Spins Offer</DialogTitle>\n            <DialogDescription className=\"text-zinc-400\">Update the offer details.</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-code\" className=\"text-sm font-medium text-zinc-300\">Code</Label>\n                <Input\n                  id=\"edit-code\"\n                  value={editData.code}\n                  onChange={(e) => setEditData({ ...editData, code: e.target.value })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-gameName-fs\" className=\"text-sm font-medium text-zinc-300\">Game Name</Label>\n                <Input\n                  id=\"edit-gameName-fs\"\n                  value={editData.gameName}\n                  onChange={(e) => setEditData({ ...editData, gameName: e.target.value })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-gameProvider\" className=\"text-sm font-medium text-zinc-300\">Game Provider</Label>\n                <Input\n                  id=\"edit-gameProvider\"\n                  value={editData.gameProvider}\n                  onChange={(e) => setEditData({ ...editData, gameProvider: e.target.value })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-gameImage-fs\" className=\"text-sm font-medium text-zinc-300\">Game Image URL</Label>\n                <Input\n                  id=\"edit-gameImage-fs\"\n                  value={editData.gameImage}\n                  onChange={(e) => setEditData({ ...editData, gameImage: e.target.value })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-spinsCount\" className=\"text-sm font-medium text-zinc-300\">Spins Count</Label>\n                <Input\n                  id=\"edit-spinsCount\"\n                  type=\"number\"\n                  value={editData.spinsCount}\n                  onChange={(e) => setEditData({ ...editData, spinsCount: parseInt(e.target.value) || 0 })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-spinValue\" className=\"text-sm font-medium text-zinc-300\">Spin Value ($)</Label>\n                <Input\n                  id=\"edit-spinValue\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={editData.spinValue}\n                  onChange={(e) => setEditData({ ...editData, spinValue: e.target.value })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-totalClaims\" className=\"text-sm font-medium text-zinc-300\">Total Claims</Label>\n                <Input\n                  id=\"edit-totalClaims\"\n                  type=\"number\"\n                  value={editData.totalClaims}\n                  onChange={(e) => setEditData({ ...editData, totalClaims: parseInt(e.target.value) || 0 })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-claimsRemaining\" className=\"text-sm font-medium text-zinc-300\">Claims Remaining</Label>\n                <Input\n                  id=\"edit-claimsRemaining\"\n                  type=\"number\"\n                  value={editData.claimsRemaining}\n                  onChange={(e) => setEditData({ ...editData, claimsRemaining: parseInt(e.target.value) || 0 })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n              <div className=\"space-y-2 col-span-2\">\n                <Label htmlFor=\"edit-expiresAt\" className=\"text-sm font-medium text-zinc-300\">Expires At</Label>\n                <Input\n                  id=\"edit-expiresAt\"\n                  type=\"datetime-local\"\n                  value={new Date(editData.expiresAt).toISOString().slice(0, 16)}\n                  onChange={(e) => setEditData({ ...editData, expiresAt: new Date(e.target.value) })}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-requirement\" className=\"text-sm font-medium text-zinc-300\">Requirements</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"edit-requirement\"\n                  value={editReqInput}\n                  onChange={(e) => setEditReqInput(e.target.value)}\n                  placeholder=\"Enter a requirement\"\n                  onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addEditRequirement())}\n                  className=\"bg-zinc-800 border-zinc-700 text-white\"\n                />\n                <Button onClick={addEditRequirement} type=\"button\" className=\"bg-red-600 hover:bg-red-700 text-white\">\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              {editData.requirements.length > 0 && (\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {editData.requirements.map((req, index) => (\n                    <Badge\n                      key={index}\n                      variant=\"secondary\"\n                      className=\"flex items-center gap-2 bg-zinc-800 text-zinc-300 border-zinc-700\"\n                    >\n                      <span className=\"text-sm\">{req}</span>\n                      <button\n                        onClick={() => removeEditRequirement(index)}\n                        className=\"hover:text-white\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"edit-isActive\"\n                checked={editData.isActive}\n                onCheckedChange={(checked) => setEditData({ ...editData, isActive: checked })}\n              />\n              <Label htmlFor=\"edit-isActive\" className=\"text-sm font-medium text-zinc-300\">Active</Label>\n            </div>\n\n            <Button\n              onClick={() => editingOffer && updateMutation.mutate({ id: editingOffer.id, data: editData })}\n              disabled={updateMutation.isPending}\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction SettingsAdmin() {\n  const { toast } = useToast();\n  const { data: settings } = useQuery<LeaderboardSettings>({\n    queryKey: [\"/api/leaderboard/settings\"],\n  });\n\n  const [newSettings, setNewSettings] = useState<InsertLeaderboardSettings>({\n    totalPrizePool: \"10000\",\n    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: InsertLeaderboardSettings) => {\n      const payload = {\n        ...data,\n        endDate: data.endDate instanceof Date ? data.endDate.toISOString() : data.endDate,\n      };\n      return apiRequest(\"POST\", \"/api/leaderboard/settings\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/settings\"] });\n      toast({ title: \"Settings updated successfully\" });\n    },\n  });\n\n  return (\n    <div className=\"space-y-6 max-w-2xl\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-white mb-2\">Leaderboard Settings</h2>\n        <p className=\"text-zinc-400\">Configure global leaderboard settings</p>\n      </div>\n\n      <Card className=\"p-8 bg-zinc-900 border-zinc-800\">\n        <div className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"prizePool\" className=\"text-sm font-medium text-zinc-300\">Total Prize Pool ($)</Label>\n            <Input\n              id=\"prizePool\"\n              type=\"number\"\n              step=\"0.01\"\n              value={newSettings.totalPrizePool}\n              onChange={(e) => setNewSettings({ ...newSettings, totalPrizePool: e.target.value })}\n              data-testid=\"input-prize-pool\"\n              className=\"bg-zinc-800 border-zinc-700 text-white\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"endDate\" className=\"text-sm font-medium text-zinc-300\">End Date</Label>\n            <Input\n              id=\"endDate\"\n              type=\"datetime-local\"\n              value={new Date(newSettings.endDate).toISOString().slice(0, 16)}\n              onChange={(e) => setNewSettings({ ...newSettings, endDate: new Date(e.target.value) })}\n              data-testid=\"input-end-date\"\n              className=\"bg-zinc-800 border-zinc-700 text-white\"\n            />\n          </div>\n\n          {settings && (\n            <div className=\"p-6 bg-zinc-950 border border-zinc-800 rounded-lg space-y-3\">\n              <p className=\"text-sm font-semibold text-white\">Current Settings</p>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-zinc-400\">\n                  <span className=\"font-medium text-zinc-300\">Prize Pool:</span> ${Number(settings.totalPrizePool).toLocaleString()}\n                </p>\n                <p className=\"text-sm text-zinc-400\">\n                  <span className=\"font-medium text-zinc-300\">Ends:</span> {new Date(settings.endDate).toLocaleString()}\n                </p>\n              </div>\n            </div>\n          )}\n\n          <Button\n            onClick={() => updateMutation.mutate(newSettings)}\n            disabled={updateMutation.isPending}\n            data-testid=\"button-save-settings\"\n            className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save Settings\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":68051},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/countdown-timer.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface CountdownTimerProps {\n  endDate: Date;\n}\n\ninterface TimeLeft {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\nexport function CountdownTimer({ endDate }: CountdownTimerProps) {\n  const [timeLeft, setTimeLeft] = useState<TimeLeft>(calculateTimeLeft());\n\n  function calculateTimeLeft(): TimeLeft {\n    const difference = new Date(endDate).getTime() - new Date().getTime();\n    \n    if (difference <= 0) {\n      return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n    }\n\n    return {\n      days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n      hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n      minutes: Math.floor((difference / 1000 / 60) % 60),\n      seconds: Math.floor((difference / 1000) % 60),\n    };\n  }\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [endDate]);\n\n  const TimeUnit = ({ value, label }: { value: number; label: string }) => (\n    <div className=\"flex flex-col items-center gap-3\" data-testid={`timer-${label.toLowerCase()}`}>\n      <Card className=\"relative overflow-hidden p-6 min-w-[90px] md:min-w-[110px] bg-gradient-to-br from-card to-muted/20 border-2 border-primary/20 glow-card-primary\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-accent/10 animate-gradient-slow\"></div>\n        <div className=\"absolute inset-0 bg-grid opacity-5\"></div>\n        <div className=\"relative\">\n          <div className=\"text-4xl md:text-5xl font-extrabold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent tabular-nums glow-text\">\n            {value.toString().padStart(2, '0')}\n          </div>\n        </div>\n      </Card>\n      <div className=\"text-xs md:text-sm uppercase tracking-wider text-muted-foreground font-semibold\">\n        {label}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex gap-4 md:gap-6 justify-center flex-wrap\">\n      <TimeUnit value={timeLeft.days} label=\"Days\" />\n      <TimeUnit value={timeLeft.hours} label=\"Hours\" />\n      <TimeUnit value={timeLeft.minutes} label=\"Minutes\" />\n      <TimeUnit value={timeLeft.seconds} label=\"Seconds\" />\n    </div>\n  );\n}\n","size_bytes":2320},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/firebase.ts":{"content":"import { initializeApp, cert, getApps, type ServiceAccount } from 'firebase-admin/app';\nimport { getDatabase } from 'firebase-admin/database';\nimport type { Database } from 'firebase-admin/database';\n\nlet db: Database | null = null;\nlet isInitialized = false;\n\nconst DATABASE_URL = \"https://mojo-80d6e-default-rtdb.firebaseio.com\";\n\nexport function initializeFirebase() {\n  if (getApps().length === 0) {\n    const serviceAccountKey = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;\n    \n    if (!serviceAccountKey) {\n      console.warn(\n        '\\n⚠️  FIREBASE_SERVICE_ACCOUNT_KEY is not set!\\n' +\n        'The app may work in development if your database rules allow unauthenticated access,\\n' +\n        'but for production you should add your Firebase service account key as a Replit Secret.\\n'\n      );\n      initializeApp({\n        databaseURL: DATABASE_URL\n      });\n    } else {\n      try {\n        const serviceAccount = JSON.parse(serviceAccountKey) as ServiceAccount;\n        console.log('✓ Firebase Admin initialized with service account credentials');\n        initializeApp({\n          credential: cert(serviceAccount),\n          databaseURL: DATABASE_URL\n        });\n      } catch (error) {\n        console.error('❌ Failed to parse Firebase service account key:', error);\n        console.warn('Falling back to unauthenticated access. This may fail if database rules require authentication.');\n        initializeApp({\n          databaseURL: DATABASE_URL\n        });\n      }\n    }\n  }\n  \n  if (!db) {\n    db = getDatabase();\n    isInitialized = true;\n  }\n  \n  return db;\n}\n\nexport function getDb() {\n  if (!db) {\n    return initializeFirebase();\n  }\n  return db;\n}\n","size_bytes":1677},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, onValue, off, type Database } from \"firebase/database\";\nimport type { LeaderboardEntry, LeaderboardSettings, Challenge, FreeSpinsOffer } from \"@shared/schema\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDNSSsiMI-6jSMEkNv-l6HUHjhef89PAxM\",\n  authDomain: \"mojo-80d6e.firebaseapp.com\",\n  databaseURL: \"https://mojo-80d6e-default-rtdb.firebaseio.com\",\n  projectId: \"mojo-80d6e\",\n  storageBucket: \"mojo-80d6e.firebasestorage.app\",\n  messagingSenderId: \"150961926057\",\n  appId: \"1:150961926057:web:36be7e8970144082539eb8\"\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const database = getDatabase(app);\n\n// Helper function to normalize Firebase snapshots to arrays\nfunction snapshotToArray<T>(snapshot: any): T[] {\n  const items: T[] = [];\n  snapshot.forEach((child: any) => {\n    items.push({ id: child.key, ...child.val() } as T);\n  });\n  return items;\n}\n\n// Real-time listener for leaderboard entries\nexport function subscribeToLeaderboardEntries(\n  callback: (entries: LeaderboardEntry[]) => void\n): () => void {\n  const entriesRef = ref(database, 'leaderboardEntries');\n  \n  const listener = (snapshot: any) => {\n    const entries = snapshotToArray<LeaderboardEntry>(snapshot);\n    // Sort by rank\n    entries.sort((a, b) => (a.rank || 0) - (b.rank || 0));\n    callback(entries);\n  };\n  \n  const errorHandler = (error: Error) => {\n    console.error('Firebase error fetching leaderboard entries:', error);\n    callback([]);\n  };\n  \n  onValue(entriesRef, listener, errorHandler);\n  \n  // Return unsubscribe function\n  return () => off(entriesRef, 'value', listener);\n}\n\n// Real-time listener for leaderboard settings\nexport function subscribeToLeaderboardSettings(\n  callback: (settings: LeaderboardSettings | null) => void\n): () => void {\n  const settingsRef = ref(database, 'leaderboardSettings');\n  \n  const listener = (snapshot: any) => {\n    let settings: LeaderboardSettings | null = null;\n    snapshot.forEach((child: any) => {\n      settings = { id: child.key, ...child.val() } as LeaderboardSettings;\n      return true; // Stop after first item\n    });\n    callback(settings);\n  };\n  \n  const errorHandler = (error: Error) => {\n    console.error('Firebase error fetching leaderboard settings:', error);\n    callback(null);\n  };\n  \n  onValue(settingsRef, listener, errorHandler);\n  \n  return () => off(settingsRef, 'value', listener);\n}\n\n// Real-time listener for challenges\nexport function subscribeToChallenges(\n  callback: (challenges: Challenge[]) => void\n): () => void {\n  const challengesRef = ref(database, 'challenges');\n  \n  const listener = (snapshot: any) => {\n    const challenges = snapshotToArray<Challenge>(snapshot);\n    // Sort by creation date (newest first)\n    challenges.sort((a, b) => {\n      const dateA = new Date(a.createdAt || 0).getTime();\n      const dateB = new Date(b.createdAt || 0).getTime();\n      return dateB - dateA;\n    });\n    callback(challenges);\n  };\n  \n  const errorHandler = (error: Error) => {\n    console.error('Firebase error fetching challenges:', error);\n    callback([]);\n  };\n  \n  onValue(challengesRef, listener, errorHandler);\n  \n  return () => off(challengesRef, 'value', listener);\n}\n\n// Real-time listener for free spins offers\nexport function subscribeToFreeSpinsOffers(\n  callback: (offers: FreeSpinsOffer[]) => void\n): () => void {\n  const offersRef = ref(database, 'freeSpinsOffers');\n  \n  const listener = (snapshot: any) => {\n    const offers = snapshotToArray<FreeSpinsOffer>(snapshot);\n    // Sort by creation date (newest first)\n    offers.sort((a, b) => {\n      const dateA = new Date(a.createdAt || 0).getTime();\n      const dateB = new Date(b.createdAt || 0).getTime();\n      return dateB - dateA;\n    });\n    callback(offers);\n  };\n  \n  const errorHandler = (error: Error) => {\n    console.error('Firebase error fetching free spins offers:', error);\n    callback([]);\n  };\n  \n  onValue(offersRef, listener, errorHandler);\n  \n  return () => off(offersRef, 'value', listener);\n}\n","size_bytes":4031}},"version":2}